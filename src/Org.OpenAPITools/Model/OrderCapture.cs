/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrderCapture
    /// </summary>
    [DataContract(Name = "Order.Capture")]
    public partial class OrderCapture : IEquatable<OrderCapture>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderCapture" /> class.
        /// </summary>
        /// <param name="captureId">captureId.</param>
        /// <param name="orderPaymentId">orderPaymentId.</param>
        /// <param name="orderId">orderId.</param>
        /// <param name="externalOrderId">externalOrderId.</param>
        /// <param name="externalId">externalId.</param>
        /// <param name="reference">reference.</param>
        /// <param name="description">description.</param>
        /// <param name="processedOn">processedOn.</param>
        /// <param name="capturedItemTotal">capturedItemTotal.</param>
        /// <param name="capturedShippingFee">capturedShippingFee.</param>
        /// <param name="capturedPaymentFee">capturedPaymentFee.</param>
        /// <param name="capturedDiscount">capturedDiscount.</param>
        /// <param name="capturedBalance">capturedBalance.</param>
        /// <param name="vatRate">vatRate.</param>
        /// <param name="trackingNumber">trackingNumber.</param>
        /// <param name="shippingName">shippingName.</param>
        /// <param name="trackingUri">trackingUri.</param>
        /// <param name="shippingMethod">shippingMethod.</param>
        /// <param name="paymentName">paymentName.</param>
        /// <param name="locale">locale.</param>
        /// <param name="rows">rows.</param>
        /// <param name="orderTransactionId">orderTransactionId.</param>
        /// <param name="secondaryOrderTransactionId">secondaryOrderTransactionId.</param>
        public OrderCapture(Guid captureId = default(Guid), Guid orderPaymentId = default(Guid), int orderId = default(int), string externalOrderId = default(string), string externalId = default(string), string reference = default(string), string description = default(string), DateTime processedOn = default(DateTime), double capturedItemTotal = default(double), double capturedShippingFee = default(double), double capturedPaymentFee = default(double), double capturedDiscount = default(double), double capturedBalance = default(double), double vatRate = default(double), string trackingNumber = default(string), string shippingName = default(string), string trackingUri = default(string), string shippingMethod = default(string), string paymentName = default(string), string locale = default(string), List<OrderCaptureRow> rows = default(List<OrderCaptureRow>), string orderTransactionId = default(string), string secondaryOrderTransactionId = default(string))
        {
            this.CaptureId = captureId;
            this.OrderPaymentId = orderPaymentId;
            this.OrderId = orderId;
            this.ExternalOrderId = externalOrderId;
            this.ExternalId = externalId;
            this.Reference = reference;
            this.Description = description;
            this.ProcessedOn = processedOn;
            this.CapturedItemTotal = capturedItemTotal;
            this.CapturedShippingFee = capturedShippingFee;
            this.CapturedPaymentFee = capturedPaymentFee;
            this.CapturedDiscount = capturedDiscount;
            this.CapturedBalance = capturedBalance;
            this.VatRate = vatRate;
            this.TrackingNumber = trackingNumber;
            this.ShippingName = shippingName;
            this.TrackingUri = trackingUri;
            this.ShippingMethod = shippingMethod;
            this.PaymentName = paymentName;
            this.Locale = locale;
            this.Rows = rows;
            this.OrderTransactionId = orderTransactionId;
            this.SecondaryOrderTransactionId = secondaryOrderTransactionId;
        }

        /// <summary>
        /// Gets or Sets CaptureId
        /// </summary>
        [DataMember(Name = "CaptureId", EmitDefaultValue = false)]
        public Guid CaptureId { get; set; }

        /// <summary>
        /// Gets or Sets OrderPaymentId
        /// </summary>
        [DataMember(Name = "OrderPaymentId", EmitDefaultValue = false)]
        public Guid OrderPaymentId { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name = "OrderId", EmitDefaultValue = false)]
        public int OrderId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalOrderId
        /// </summary>
        [DataMember(Name = "ExternalOrderId", EmitDefaultValue = false)]
        public string ExternalOrderId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name = "ExternalId", EmitDefaultValue = false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name = "Reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ProcessedOn
        /// </summary>
        [DataMember(Name = "ProcessedOn", EmitDefaultValue = false)]
        public DateTime ProcessedOn { get; set; }

        /// <summary>
        /// Gets or Sets CapturedItemTotal
        /// </summary>
        [DataMember(Name = "CapturedItemTotal", EmitDefaultValue = false)]
        public double CapturedItemTotal { get; set; }

        /// <summary>
        /// Gets or Sets CapturedShippingFee
        /// </summary>
        [DataMember(Name = "CapturedShippingFee", EmitDefaultValue = false)]
        public double CapturedShippingFee { get; set; }

        /// <summary>
        /// Gets or Sets CapturedPaymentFee
        /// </summary>
        [DataMember(Name = "CapturedPaymentFee", EmitDefaultValue = false)]
        public double CapturedPaymentFee { get; set; }

        /// <summary>
        /// Gets or Sets CapturedDiscount
        /// </summary>
        [DataMember(Name = "CapturedDiscount", EmitDefaultValue = false)]
        public double CapturedDiscount { get; set; }

        /// <summary>
        /// Gets or Sets CapturedBalance
        /// </summary>
        [DataMember(Name = "CapturedBalance", EmitDefaultValue = false)]
        public double CapturedBalance { get; set; }

        /// <summary>
        /// Gets or Sets VatRate
        /// </summary>
        [DataMember(Name = "VatRate", EmitDefaultValue = false)]
        public double VatRate { get; set; }

        /// <summary>
        /// Gets or Sets TrackingNumber
        /// </summary>
        [DataMember(Name = "TrackingNumber", EmitDefaultValue = false)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets ShippingName
        /// </summary>
        [DataMember(Name = "ShippingName", EmitDefaultValue = false)]
        public string ShippingName { get; set; }

        /// <summary>
        /// Gets or Sets TrackingUri
        /// </summary>
        [DataMember(Name = "TrackingUri", EmitDefaultValue = false)]
        public string TrackingUri { get; set; }

        /// <summary>
        /// Gets or Sets ShippingMethod
        /// </summary>
        [DataMember(Name = "ShippingMethod", EmitDefaultValue = false)]
        public string ShippingMethod { get; set; }

        /// <summary>
        /// Gets or Sets PaymentName
        /// </summary>
        [DataMember(Name = "PaymentName", EmitDefaultValue = false)]
        public string PaymentName { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name = "Locale", EmitDefaultValue = false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets Rows
        /// </summary>
        [DataMember(Name = "Rows", EmitDefaultValue = false)]
        public List<OrderCaptureRow> Rows { get; set; }

        /// <summary>
        /// Gets or Sets OrderTransactionId
        /// </summary>
        [DataMember(Name = "OrderTransactionId", EmitDefaultValue = false)]
        public string OrderTransactionId { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryOrderTransactionId
        /// </summary>
        [DataMember(Name = "SecondaryOrderTransactionId", EmitDefaultValue = false)]
        public string SecondaryOrderTransactionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderCapture {\n");
            sb.Append("  CaptureId: ").Append(CaptureId).Append("\n");
            sb.Append("  OrderPaymentId: ").Append(OrderPaymentId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  ExternalOrderId: ").Append(ExternalOrderId).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ProcessedOn: ").Append(ProcessedOn).Append("\n");
            sb.Append("  CapturedItemTotal: ").Append(CapturedItemTotal).Append("\n");
            sb.Append("  CapturedShippingFee: ").Append(CapturedShippingFee).Append("\n");
            sb.Append("  CapturedPaymentFee: ").Append(CapturedPaymentFee).Append("\n");
            sb.Append("  CapturedDiscount: ").Append(CapturedDiscount).Append("\n");
            sb.Append("  CapturedBalance: ").Append(CapturedBalance).Append("\n");
            sb.Append("  VatRate: ").Append(VatRate).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  ShippingName: ").Append(ShippingName).Append("\n");
            sb.Append("  TrackingUri: ").Append(TrackingUri).Append("\n");
            sb.Append("  ShippingMethod: ").Append(ShippingMethod).Append("\n");
            sb.Append("  PaymentName: ").Append(PaymentName).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Rows: ").Append(Rows).Append("\n");
            sb.Append("  OrderTransactionId: ").Append(OrderTransactionId).Append("\n");
            sb.Append("  SecondaryOrderTransactionId: ").Append(SecondaryOrderTransactionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderCapture);
        }

        /// <summary>
        /// Returns true if OrderCapture instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderCapture to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderCapture input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CaptureId == input.CaptureId ||
                    (this.CaptureId != null &&
                    this.CaptureId.Equals(input.CaptureId))
                ) && 
                (
                    this.OrderPaymentId == input.OrderPaymentId ||
                    (this.OrderPaymentId != null &&
                    this.OrderPaymentId.Equals(input.OrderPaymentId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    this.OrderId.Equals(input.OrderId)
                ) && 
                (
                    this.ExternalOrderId == input.ExternalOrderId ||
                    (this.ExternalOrderId != null &&
                    this.ExternalOrderId.Equals(input.ExternalOrderId))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ProcessedOn == input.ProcessedOn ||
                    (this.ProcessedOn != null &&
                    this.ProcessedOn.Equals(input.ProcessedOn))
                ) && 
                (
                    this.CapturedItemTotal == input.CapturedItemTotal ||
                    this.CapturedItemTotal.Equals(input.CapturedItemTotal)
                ) && 
                (
                    this.CapturedShippingFee == input.CapturedShippingFee ||
                    this.CapturedShippingFee.Equals(input.CapturedShippingFee)
                ) && 
                (
                    this.CapturedPaymentFee == input.CapturedPaymentFee ||
                    this.CapturedPaymentFee.Equals(input.CapturedPaymentFee)
                ) && 
                (
                    this.CapturedDiscount == input.CapturedDiscount ||
                    this.CapturedDiscount.Equals(input.CapturedDiscount)
                ) && 
                (
                    this.CapturedBalance == input.CapturedBalance ||
                    this.CapturedBalance.Equals(input.CapturedBalance)
                ) && 
                (
                    this.VatRate == input.VatRate ||
                    this.VatRate.Equals(input.VatRate)
                ) && 
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    (this.TrackingNumber != null &&
                    this.TrackingNumber.Equals(input.TrackingNumber))
                ) && 
                (
                    this.ShippingName == input.ShippingName ||
                    (this.ShippingName != null &&
                    this.ShippingName.Equals(input.ShippingName))
                ) && 
                (
                    this.TrackingUri == input.TrackingUri ||
                    (this.TrackingUri != null &&
                    this.TrackingUri.Equals(input.TrackingUri))
                ) && 
                (
                    this.ShippingMethod == input.ShippingMethod ||
                    (this.ShippingMethod != null &&
                    this.ShippingMethod.Equals(input.ShippingMethod))
                ) && 
                (
                    this.PaymentName == input.PaymentName ||
                    (this.PaymentName != null &&
                    this.PaymentName.Equals(input.PaymentName))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.Rows == input.Rows ||
                    this.Rows != null &&
                    input.Rows != null &&
                    this.Rows.SequenceEqual(input.Rows)
                ) && 
                (
                    this.OrderTransactionId == input.OrderTransactionId ||
                    (this.OrderTransactionId != null &&
                    this.OrderTransactionId.Equals(input.OrderTransactionId))
                ) && 
                (
                    this.SecondaryOrderTransactionId == input.SecondaryOrderTransactionId ||
                    (this.SecondaryOrderTransactionId != null &&
                    this.SecondaryOrderTransactionId.Equals(input.SecondaryOrderTransactionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CaptureId != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureId.GetHashCode();
                }
                if (this.OrderPaymentId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderPaymentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                if (this.ExternalOrderId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalOrderId.GetHashCode();
                }
                if (this.ExternalId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalId.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ProcessedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessedOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CapturedItemTotal.GetHashCode();
                hashCode = (hashCode * 59) + this.CapturedShippingFee.GetHashCode();
                hashCode = (hashCode * 59) + this.CapturedPaymentFee.GetHashCode();
                hashCode = (hashCode * 59) + this.CapturedDiscount.GetHashCode();
                hashCode = (hashCode * 59) + this.CapturedBalance.GetHashCode();
                hashCode = (hashCode * 59) + this.VatRate.GetHashCode();
                if (this.TrackingNumber != null)
                {
                    hashCode = (hashCode * 59) + this.TrackingNumber.GetHashCode();
                }
                if (this.ShippingName != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingName.GetHashCode();
                }
                if (this.TrackingUri != null)
                {
                    hashCode = (hashCode * 59) + this.TrackingUri.GetHashCode();
                }
                if (this.ShippingMethod != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingMethod.GetHashCode();
                }
                if (this.PaymentName != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentName.GetHashCode();
                }
                if (this.Locale != null)
                {
                    hashCode = (hashCode * 59) + this.Locale.GetHashCode();
                }
                if (this.Rows != null)
                {
                    hashCode = (hashCode * 59) + this.Rows.GetHashCode();
                }
                if (this.OrderTransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderTransactionId.GetHashCode();
                }
                if (this.SecondaryOrderTransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.SecondaryOrderTransactionId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
