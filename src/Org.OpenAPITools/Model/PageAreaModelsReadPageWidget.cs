/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The API-representation of page widgets
    /// </summary>
    [DataContract(Name = "PageArea.Models.Read.PageWidget")]
    public partial class PageAreaModelsReadPageWidget : IEquatable<PageAreaModelsReadPageWidget>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PageAreaModelsReadPageWidget" /> class.
        /// </summary>
        /// <param name="id">The IDs of widgets are immutable (determined by each view model implementation, in the namespace Carismar.Core).</param>
        /// <param name="name">The static name of this widget. Used to translate into icons, or to append to css-classes..</param>
        /// <param name="type">The name of the widget-type.</param>
        /// <param name="active">Decides if this {PageArea.Models.Read.PageWidget} is active or not.</param>
        /// <param name="classNames">Holds all CSS Class names that this widget should render.</param>
        /// <param name="size">The fractional size for this widget in it&#39;s container..</param>
        /// <param name="configuration">The configuration for this {PageArea.Models.Read.PageWidget}.</param>
        public PageAreaModelsReadPageWidget(Guid id = default(Guid), string name = default(string), string type = default(string), bool active = default(bool), List<string> classNames = default(List<string>), string size = default(string), string configuration = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.Type = type;
            this.Active = active;
            this.ClassNames = classNames;
            this.Size = size;
            this._Configuration = configuration;
        }

        /// <summary>
        /// The IDs of widgets are immutable (determined by each view model implementation, in the namespace Carismar.Core)
        /// </summary>
        /// <value>The IDs of widgets are immutable (determined by each view model implementation, in the namespace Carismar.Core)</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// The static name of this widget. Used to translate into icons, or to append to css-classes.
        /// </summary>
        /// <value>The static name of this widget. Used to translate into icons, or to append to css-classes.</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The name of the widget-type
        /// </summary>
        /// <value>The name of the widget-type</value>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Decides if this {PageArea.Models.Read.PageWidget} is active or not
        /// </summary>
        /// <value>Decides if this {PageArea.Models.Read.PageWidget} is active or not</value>
        [DataMember(Name = "Active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Holds all CSS Class names that this widget should render
        /// </summary>
        /// <value>Holds all CSS Class names that this widget should render</value>
        [DataMember(Name = "ClassNames", EmitDefaultValue = false)]
        public List<string> ClassNames { get; set; }

        /// <summary>
        /// The fractional size for this widget in it&#39;s container.
        /// </summary>
        /// <value>The fractional size for this widget in it&#39;s container.</value>
        [DataMember(Name = "Size", EmitDefaultValue = false)]
        public string Size { get; set; }

        /// <summary>
        /// The configuration for this {PageArea.Models.Read.PageWidget}
        /// </summary>
        /// <value>The configuration for this {PageArea.Models.Read.PageWidget}</value>
        [DataMember(Name = "Configuration", EmitDefaultValue = false)]
        public string _Configuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PageAreaModelsReadPageWidget {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  ClassNames: ").Append(ClassNames).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  _Configuration: ").Append(_Configuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PageAreaModelsReadPageWidget);
        }

        /// <summary>
        /// Returns true if PageAreaModelsReadPageWidget instances are equal
        /// </summary>
        /// <param name="input">Instance of PageAreaModelsReadPageWidget to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PageAreaModelsReadPageWidget input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.ClassNames == input.ClassNames ||
                    this.ClassNames != null &&
                    input.ClassNames != null &&
                    this.ClassNames.SequenceEqual(input.ClassNames)
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this._Configuration == input._Configuration ||
                    (this._Configuration != null &&
                    this._Configuration.Equals(input._Configuration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.ClassNames != null)
                {
                    hashCode = (hashCode * 59) + this.ClassNames.GetHashCode();
                }
                if (this.Size != null)
                {
                    hashCode = (hashCode * 59) + this.Size.GetHashCode();
                }
                if (this._Configuration != null)
                {
                    hashCode = (hashCode * 59) + this._Configuration.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
