/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PageAreaModelsReadPageAreaFamily
    /// </summary>
    [DataContract(Name = "PageArea.Models.Read.PageAreaFamily")]
    public partial class PageAreaModelsReadPageAreaFamily : IEquatable<PageAreaModelsReadPageAreaFamily>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PageAreaModelsReadPageAreaFamily" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="filterableProperties">This page area family has access to the following properties that can be used for filtering, when rendering itself..</param>
        /// <param name="areas">areas.</param>
        public PageAreaModelsReadPageAreaFamily(int id = default(int), string name = default(string), string filterableProperties = default(string), List<PageAreaModelsReadPageArea> areas = default(List<PageAreaModelsReadPageArea>))
        {
            this.Id = id;
            this.Name = name;
            this.FilterableProperties = filterableProperties;
            this.Areas = areas;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// This page area family has access to the following properties that can be used for filtering, when rendering itself.
        /// </summary>
        /// <value>This page area family has access to the following properties that can be used for filtering, when rendering itself.</value>
        [DataMember(Name = "FilterableProperties", EmitDefaultValue = false)]
        public string FilterableProperties { get; set; }

        /// <summary>
        /// Gets or Sets Areas
        /// </summary>
        [DataMember(Name = "Areas", EmitDefaultValue = false)]
        public List<PageAreaModelsReadPageArea> Areas { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PageAreaModelsReadPageAreaFamily {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FilterableProperties: ").Append(FilterableProperties).Append("\n");
            sb.Append("  Areas: ").Append(Areas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PageAreaModelsReadPageAreaFamily);
        }

        /// <summary>
        /// Returns true if PageAreaModelsReadPageAreaFamily instances are equal
        /// </summary>
        /// <param name="input">Instance of PageAreaModelsReadPageAreaFamily to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PageAreaModelsReadPageAreaFamily input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FilterableProperties == input.FilterableProperties ||
                    (this.FilterableProperties != null &&
                    this.FilterableProperties.Equals(input.FilterableProperties))
                ) && 
                (
                    this.Areas == input.Areas ||
                    this.Areas != null &&
                    input.Areas != null &&
                    this.Areas.SequenceEqual(input.Areas)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.FilterableProperties != null)
                {
                    hashCode = (hashCode * 59) + this.FilterableProperties.GetHashCode();
                }
                if (this.Areas != null)
                {
                    hashCode = (hashCode * 59) + this.Areas.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
