/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PaymentModelsPaymentOption
    /// </summary>
    [DataContract(Name = "Payment.Models.PaymentOption")]
    public partial class PaymentModelsPaymentOption : IEquatable<PaymentModelsPaymentOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentModelsPaymentOption" /> class.
        /// </summary>
        /// <param name="paymentId">paymentId.</param>
        /// <param name="paymentGroupId">paymentGroupId.</param>
        /// <param name="name">name.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="fee">fee.</param>
        /// <param name="icon">icon.</param>
        /// <param name="sort">sort.</param>
        /// <param name="period">period.</param>
        /// <param name="termsLink">termsLink.</param>
        /// <param name="infoLink">infoLink.</param>
        /// <param name="personalIdRequired">personalIdRequired.</param>
        /// <param name="registeredAddressRequired">registeredAddressRequired.</param>
        /// <param name="houseNumberRequired">houseNumberRequired.</param>
        /// <param name="houseExtensionShown">houseExtensionShown.</param>
        /// <param name="genderRequired">genderRequired.</param>
        /// <param name="birthdateRequired">birthdateRequired.</param>
        public PaymentModelsPaymentOption(int paymentId = default(int), int paymentGroupId = default(int), string name = default(string), string displayName = default(string), double fee = default(double), string icon = default(string), int sort = default(int), int period = default(int), string termsLink = default(string), string infoLink = default(string), bool personalIdRequired = default(bool), bool registeredAddressRequired = default(bool), bool houseNumberRequired = default(bool), bool houseExtensionShown = default(bool), bool genderRequired = default(bool), bool birthdateRequired = default(bool))
        {
            this.PaymentId = paymentId;
            this.PaymentGroupId = paymentGroupId;
            this.Name = name;
            this.DisplayName = displayName;
            this.Fee = fee;
            this.Icon = icon;
            this.Sort = sort;
            this.Period = period;
            this.TermsLink = termsLink;
            this.InfoLink = infoLink;
            this.PersonalIdRequired = personalIdRequired;
            this.RegisteredAddressRequired = registeredAddressRequired;
            this.HouseNumberRequired = houseNumberRequired;
            this.HouseExtensionShown = houseExtensionShown;
            this.GenderRequired = genderRequired;
            this.BirthdateRequired = birthdateRequired;
        }

        /// <summary>
        /// Gets or Sets PaymentId
        /// </summary>
        [DataMember(Name = "PaymentId", EmitDefaultValue = false)]
        public int PaymentId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentGroupId
        /// </summary>
        [DataMember(Name = "PaymentGroupId", EmitDefaultValue = false)]
        public int PaymentGroupId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "DisplayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name = "Fee", EmitDefaultValue = false)]
        public double Fee { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name = "Icon", EmitDefaultValue = false)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name = "Sort", EmitDefaultValue = false)]
        public int Sort { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "Period", EmitDefaultValue = false)]
        public int Period { get; set; }

        /// <summary>
        /// Gets or Sets TermsLink
        /// </summary>
        [DataMember(Name = "TermsLink", EmitDefaultValue = false)]
        public string TermsLink { get; set; }

        /// <summary>
        /// Gets or Sets InfoLink
        /// </summary>
        [DataMember(Name = "InfoLink", EmitDefaultValue = false)]
        public string InfoLink { get; set; }

        /// <summary>
        /// Gets or Sets PersonalIdRequired
        /// </summary>
        [DataMember(Name = "PersonalIdRequired", EmitDefaultValue = true)]
        public bool PersonalIdRequired { get; set; }

        /// <summary>
        /// Gets or Sets RegisteredAddressRequired
        /// </summary>
        [DataMember(Name = "RegisteredAddressRequired", EmitDefaultValue = true)]
        public bool RegisteredAddressRequired { get; set; }

        /// <summary>
        /// Gets or Sets HouseNumberRequired
        /// </summary>
        [DataMember(Name = "HouseNumberRequired", EmitDefaultValue = true)]
        public bool HouseNumberRequired { get; set; }

        /// <summary>
        /// Gets or Sets HouseExtensionShown
        /// </summary>
        [DataMember(Name = "HouseExtensionShown", EmitDefaultValue = true)]
        public bool HouseExtensionShown { get; set; }

        /// <summary>
        /// Gets or Sets GenderRequired
        /// </summary>
        [DataMember(Name = "GenderRequired", EmitDefaultValue = true)]
        public bool GenderRequired { get; set; }

        /// <summary>
        /// Gets or Sets BirthdateRequired
        /// </summary>
        [DataMember(Name = "BirthdateRequired", EmitDefaultValue = true)]
        public bool BirthdateRequired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentModelsPaymentOption {\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  PaymentGroupId: ").Append(PaymentGroupId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  TermsLink: ").Append(TermsLink).Append("\n");
            sb.Append("  InfoLink: ").Append(InfoLink).Append("\n");
            sb.Append("  PersonalIdRequired: ").Append(PersonalIdRequired).Append("\n");
            sb.Append("  RegisteredAddressRequired: ").Append(RegisteredAddressRequired).Append("\n");
            sb.Append("  HouseNumberRequired: ").Append(HouseNumberRequired).Append("\n");
            sb.Append("  HouseExtensionShown: ").Append(HouseExtensionShown).Append("\n");
            sb.Append("  GenderRequired: ").Append(GenderRequired).Append("\n");
            sb.Append("  BirthdateRequired: ").Append(BirthdateRequired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentModelsPaymentOption);
        }

        /// <summary>
        /// Returns true if PaymentModelsPaymentOption instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentModelsPaymentOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentModelsPaymentOption input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PaymentId == input.PaymentId ||
                    this.PaymentId.Equals(input.PaymentId)
                ) && 
                (
                    this.PaymentGroupId == input.PaymentGroupId ||
                    this.PaymentGroupId.Equals(input.PaymentGroupId)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Fee == input.Fee ||
                    this.Fee.Equals(input.Fee)
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.Sort == input.Sort ||
                    this.Sort.Equals(input.Sort)
                ) && 
                (
                    this.Period == input.Period ||
                    this.Period.Equals(input.Period)
                ) && 
                (
                    this.TermsLink == input.TermsLink ||
                    (this.TermsLink != null &&
                    this.TermsLink.Equals(input.TermsLink))
                ) && 
                (
                    this.InfoLink == input.InfoLink ||
                    (this.InfoLink != null &&
                    this.InfoLink.Equals(input.InfoLink))
                ) && 
                (
                    this.PersonalIdRequired == input.PersonalIdRequired ||
                    this.PersonalIdRequired.Equals(input.PersonalIdRequired)
                ) && 
                (
                    this.RegisteredAddressRequired == input.RegisteredAddressRequired ||
                    this.RegisteredAddressRequired.Equals(input.RegisteredAddressRequired)
                ) && 
                (
                    this.HouseNumberRequired == input.HouseNumberRequired ||
                    this.HouseNumberRequired.Equals(input.HouseNumberRequired)
                ) && 
                (
                    this.HouseExtensionShown == input.HouseExtensionShown ||
                    this.HouseExtensionShown.Equals(input.HouseExtensionShown)
                ) && 
                (
                    this.GenderRequired == input.GenderRequired ||
                    this.GenderRequired.Equals(input.GenderRequired)
                ) && 
                (
                    this.BirthdateRequired == input.BirthdateRequired ||
                    this.BirthdateRequired.Equals(input.BirthdateRequired)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PaymentId.GetHashCode();
                hashCode = (hashCode * 59) + this.PaymentGroupId.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Fee.GetHashCode();
                if (this.Icon != null)
                {
                    hashCode = (hashCode * 59) + this.Icon.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Sort.GetHashCode();
                hashCode = (hashCode * 59) + this.Period.GetHashCode();
                if (this.TermsLink != null)
                {
                    hashCode = (hashCode * 59) + this.TermsLink.GetHashCode();
                }
                if (this.InfoLink != null)
                {
                    hashCode = (hashCode * 59) + this.InfoLink.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PersonalIdRequired.GetHashCode();
                hashCode = (hashCode * 59) + this.RegisteredAddressRequired.GetHashCode();
                hashCode = (hashCode * 59) + this.HouseNumberRequired.GetHashCode();
                hashCode = (hashCode * 59) + this.HouseExtensionShown.GetHashCode();
                hashCode = (hashCode * 59) + this.GenderRequired.GetHashCode();
                hashCode = (hashCode * 59) + this.BirthdateRequired.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
