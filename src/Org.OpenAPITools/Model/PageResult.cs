/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contains pagination information for paged operations, i.e. PageSize and PageCount.
    /// </summary>
    [DataContract(Name = "PageResult")]
    public partial class PageResult : IEquatable<PageResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PageResult" /> class.
        /// </summary>
        /// <param name="batchId">The id of the batch operation. If this property has a value for the first fetched page it has to be passed as a parameter for all subsequent requests-.</param>
        /// <param name="page">The current page.</param>
        /// <param name="rowCount">Total number of rows.</param>
        /// <param name="pageCount">Total number of pages.</param>
        /// <param name="pageSize">Page size.</param>
        /// <param name="hasMoreRows">True if there is more content to fetch..</param>
        public PageResult(Guid batchId = default(Guid), int page = default(int), int rowCount = default(int), int pageCount = default(int), int pageSize = default(int), bool hasMoreRows = default(bool))
        {
            this.BatchId = batchId;
            this.Page = page;
            this.RowCount = rowCount;
            this.PageCount = pageCount;
            this.PageSize = pageSize;
            this.HasMoreRows = hasMoreRows;
        }

        /// <summary>
        /// The id of the batch operation. If this property has a value for the first fetched page it has to be passed as a parameter for all subsequent requests-
        /// </summary>
        /// <value>The id of the batch operation. If this property has a value for the first fetched page it has to be passed as a parameter for all subsequent requests-</value>
        [DataMember(Name = "BatchId", EmitDefaultValue = false)]
        public Guid BatchId { get; set; }

        /// <summary>
        /// The current page
        /// </summary>
        /// <value>The current page</value>
        [DataMember(Name = "Page", EmitDefaultValue = false)]
        public int Page { get; set; }

        /// <summary>
        /// Total number of rows
        /// </summary>
        /// <value>Total number of rows</value>
        [DataMember(Name = "RowCount", EmitDefaultValue = false)]
        public int RowCount { get; set; }

        /// <summary>
        /// Total number of pages
        /// </summary>
        /// <value>Total number of pages</value>
        [DataMember(Name = "PageCount", EmitDefaultValue = false)]
        public int PageCount { get; set; }

        /// <summary>
        /// Page size
        /// </summary>
        /// <value>Page size</value>
        [DataMember(Name = "PageSize", EmitDefaultValue = false)]
        public int PageSize { get; set; }

        /// <summary>
        /// True if there is more content to fetch.
        /// </summary>
        /// <value>True if there is more content to fetch.</value>
        [DataMember(Name = "HasMoreRows", EmitDefaultValue = true)]
        public bool HasMoreRows { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PageResult {\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  RowCount: ").Append(RowCount).Append("\n");
            sb.Append("  PageCount: ").Append(PageCount).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  HasMoreRows: ").Append(HasMoreRows).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PageResult);
        }

        /// <summary>
        /// Returns true if PageResult instances are equal
        /// </summary>
        /// <param name="input">Instance of PageResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PageResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BatchId == input.BatchId ||
                    (this.BatchId != null &&
                    this.BatchId.Equals(input.BatchId))
                ) && 
                (
                    this.Page == input.Page ||
                    this.Page.Equals(input.Page)
                ) && 
                (
                    this.RowCount == input.RowCount ||
                    this.RowCount.Equals(input.RowCount)
                ) && 
                (
                    this.PageCount == input.PageCount ||
                    this.PageCount.Equals(input.PageCount)
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    this.PageSize.Equals(input.PageSize)
                ) && 
                (
                    this.HasMoreRows == input.HasMoreRows ||
                    this.HasMoreRows.Equals(input.HasMoreRows)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BatchId != null)
                {
                    hashCode = (hashCode * 59) + this.BatchId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Page.GetHashCode();
                hashCode = (hashCode * 59) + this.RowCount.GetHashCode();
                hashCode = (hashCode * 59) + this.PageCount.GetHashCode();
                hashCode = (hashCode * 59) + this.PageSize.GetHashCode();
                hashCode = (hashCode * 59) + this.HasMoreRows.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
