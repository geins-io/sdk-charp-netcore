/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Data carrier for an order.
    /// </summary>
    [DataContract(Name = "Order.Models.Order")]
    public partial class OrderModelsOrder : IEquatable<OrderModelsOrder>, IValidatableObject
    {
        /// <summary>
        /// Defines ExternalOrderStatus
        /// </summary>
        public enum ExternalOrderStatusEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_10 for value: 10
            /// </summary>
            NUMBER_10 = 10,

            /// <summary>
            /// Enum NUMBER_20 for value: 20
            /// </summary>
            NUMBER_20 = 20,

            /// <summary>
            /// Enum NUMBER_30 for value: 30
            /// </summary>
            NUMBER_30 = 30,

            /// <summary>
            /// Enum NUMBER_40 for value: 40
            /// </summary>
            NUMBER_40 = 40

        }


        /// <summary>
        /// Gets or Sets ExternalOrderStatus
        /// </summary>
        [DataMember(Name = "ExternalOrderStatus", EmitDefaultValue = false)]
        public ExternalOrderStatusEnum? ExternalOrderStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderModelsOrder" /> class.
        /// </summary>
        /// <param name="id">The unique identifier for this order..</param>
        /// <param name="externalId">The unique external identifier for this order..</param>
        /// <param name="personalId">The social security number, or organisational number of the customer..</param>
        /// <param name="customerId">The unique identifier of the customer placing this order..</param>
        /// <param name="customerTypeId">Customer type. Usually 1 for private customers and 2 for companies. This field is customer specific.</param>
        /// <param name="createdAt">Datetime when the order was created..</param>
        /// <param name="updatedAt">Datetime when the order was last updated..</param>
        /// <param name="completedAt">The DateTime when the order was completed (delivered, payed)..</param>
        /// <param name="status">The order status. Possbile values: cancelled, on-hold, inactive, refunded, partial,  pending-payment, out-of-stock, backorder, completed, pending..</param>
        /// <param name="currency">ISO Currency code..</param>
        /// <param name="currencyRate">The Currency Rate to SEK..</param>
        /// <param name="marketId">The unique identifier for the market this order originates from..</param>
        /// <param name="marketName">The market name. Usually this is the equal to the site name..</param>
        /// <param name="language">Two-letter Language code..</param>
        /// <param name="orderTotal">Order total..</param>
        /// <param name="expectedSum">Expected total sum to be paid after discount and balance.   &lt;para&gt;The value is usually taken directly from the payment provider and represents the actual reserved amount.&lt;/para&gt;&lt;para&gt;If this differs from OrderTotal, actions should be taken to ensure they match. This usually happens due to rounding.&lt;/para&gt;.</param>
        /// <param name="vATTotal">Order VAT total..</param>
        /// <param name="orderValueIncVat">Order value inc vat after discount but before balance.</param>
        /// <param name="orderValueExVat">Order value ex vat after discount but before balance.</param>
        /// <param name="itemValueIncVat">Item value inc vat excluding fees and discount.</param>
        /// <param name="itemValueExVat">Item value ex vat excluding fees and discount.</param>
        /// <param name="discount">Total discount inc vat..</param>
        /// <param name="discountExVat">Total discount ex vat..</param>
        /// <param name="fromBalance">The amount which was withdrawn from the customers balance inc vat..</param>
        /// <param name="shippingFee">Shipping fee inc vat..</param>
        /// <param name="shippingFeeExVat">Shipping fee ex vat..</param>
        /// <param name="paymentFee">Payment fee inc vat..</param>
        /// <param name="paymentFeeExVat">Payment fee ex vat..</param>
        /// <param name="message">Order message. Can contain instructions from customer or added details about the order..</param>
        /// <param name="orderMessages">Internal order messages. Can contain internal details about the order..</param>
        /// <param name="paymentDetails">List of payment details &lt;seealso cref&#x3D;\&quot;T:Order.Models.PaymentDetail\&quot; /&gt;..</param>
        /// <param name="shippingDetails">List of shipping details &lt;seealso cref&#x3D;\&quot;T:Order.Models.ShippingDetail\&quot; /&gt;..</param>
        /// <param name="shippingAddress">shippingAddress.</param>
        /// <param name="billingAddress">billingAddress.</param>
        /// <param name="rows">List of order rows.</param>
        /// <param name="refunds">List of order refunds &lt;seealso cref&#x3D;\&quot;T:Order.Models.Refund\&quot; /&gt;..</param>
        /// <param name="ip">Customer IP-number..</param>
        /// <param name="userAgent">Customer User Agent..</param>
        /// <param name="serviceLocation">Chosen service location..</param>
        /// <param name="campaignCode">Campaign code applied to the order..</param>
        /// <param name="campaignCodeId">The internal id of the applied campaign code..</param>
        /// <param name="percent">General percent discount applied to the order..</param>
        /// <param name="desiredDeliveryDate">The desired delivery date of the order..</param>
        /// <param name="gender">The gender of the customer. True &#x3D; male, False &#x3D; female, null &#x3D; unknown..</param>
        /// <param name="cartId">The unique identifier for the cart from which this order originates..</param>
        /// <param name="sessionId">The session id for the from which this order originates..</param>
        /// <param name="externalOrderStatus">externalOrderStatus.</param>
        /// <param name="campaignIds">The ids for the campaigns applied to this order (not rows).</param>
        /// <param name="campaignNames">The names for the campaigns applied to this order (not rows).</param>
        /// <param name="metaData">The order meta data to store additional information about the order. Eg. customer specific shipping data to include for nShift checkout (former UDC) shipments.</param>
        /// <param name="publicId">The public id of this order..</param>
        public OrderModelsOrder(int id = default(int), string externalId = default(string), string personalId = default(string), int customerId = default(int), int customerTypeId = default(int), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), DateTime completedAt = default(DateTime), string status = default(string), string currency = default(string), double currencyRate = default(double), int marketId = default(int), string marketName = default(string), string language = default(string), double orderTotal = default(double), double expectedSum = default(double), double vATTotal = default(double), double orderValueIncVat = default(double), double orderValueExVat = default(double), double itemValueIncVat = default(double), double itemValueExVat = default(double), double discount = default(double), double discountExVat = default(double), double fromBalance = default(double), double shippingFee = default(double), double shippingFeeExVat = default(double), double paymentFee = default(double), double paymentFeeExVat = default(double), string message = default(string), List<string> orderMessages = default(List<string>), List<OrderModelsPaymentDetail> paymentDetails = default(List<OrderModelsPaymentDetail>), List<OrderModelsShippingDetail> shippingDetails = default(List<OrderModelsShippingDetail>), OrderModelsAddress shippingAddress = default(OrderModelsAddress), OrderModelsAddress billingAddress = default(OrderModelsAddress), List<OrderModelsOrderRow> rows = default(List<OrderModelsOrderRow>), List<OrderModelsRefund> refunds = default(List<OrderModelsRefund>), string ip = default(string), string userAgent = default(string), string serviceLocation = default(string), string campaignCode = default(string), int campaignCodeId = default(int), int percent = default(int), DateTime desiredDeliveryDate = default(DateTime), bool gender = default(bool), int cartId = default(int), string sessionId = default(string), ExternalOrderStatusEnum? externalOrderStatus = default(ExternalOrderStatusEnum?), List<string> campaignIds = default(List<string>), List<string> campaignNames = default(List<string>), Dictionary<string, string> metaData = default(Dictionary<string, string>), Guid publicId = default(Guid))
        {
            this.Id = id;
            this.ExternalId = externalId;
            this.PersonalId = personalId;
            this.CustomerId = customerId;
            this.CustomerTypeId = customerTypeId;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.CompletedAt = completedAt;
            this.Status = status;
            this.Currency = currency;
            this.CurrencyRate = currencyRate;
            this.MarketId = marketId;
            this.MarketName = marketName;
            this.Language = language;
            this.OrderTotal = orderTotal;
            this.ExpectedSum = expectedSum;
            this.VATTotal = vATTotal;
            this.OrderValueIncVat = orderValueIncVat;
            this.OrderValueExVat = orderValueExVat;
            this.ItemValueIncVat = itemValueIncVat;
            this.ItemValueExVat = itemValueExVat;
            this.Discount = discount;
            this.DiscountExVat = discountExVat;
            this.FromBalance = fromBalance;
            this.ShippingFee = shippingFee;
            this.ShippingFeeExVat = shippingFeeExVat;
            this.PaymentFee = paymentFee;
            this.PaymentFeeExVat = paymentFeeExVat;
            this.Message = message;
            this.OrderMessages = orderMessages;
            this.PaymentDetails = paymentDetails;
            this.ShippingDetails = shippingDetails;
            this.ShippingAddress = shippingAddress;
            this.BillingAddress = billingAddress;
            this.Rows = rows;
            this.Refunds = refunds;
            this.Ip = ip;
            this.UserAgent = userAgent;
            this.ServiceLocation = serviceLocation;
            this.CampaignCode = campaignCode;
            this.CampaignCodeId = campaignCodeId;
            this.Percent = percent;
            this.DesiredDeliveryDate = desiredDeliveryDate;
            this.Gender = gender;
            this.CartId = cartId;
            this.SessionId = sessionId;
            this.ExternalOrderStatus = externalOrderStatus;
            this.CampaignIds = campaignIds;
            this.CampaignNames = campaignNames;
            this.MetaData = metaData;
            this.PublicId = publicId;
        }

        /// <summary>
        /// The unique identifier for this order.
        /// </summary>
        /// <value>The unique identifier for this order.</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The unique external identifier for this order.
        /// </summary>
        /// <value>The unique external identifier for this order.</value>
        [DataMember(Name = "ExternalId", EmitDefaultValue = false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// The social security number, or organisational number of the customer.
        /// </summary>
        /// <value>The social security number, or organisational number of the customer.</value>
        [DataMember(Name = "PersonalId", EmitDefaultValue = false)]
        public string PersonalId { get; set; }

        /// <summary>
        /// The unique identifier of the customer placing this order.
        /// </summary>
        /// <value>The unique identifier of the customer placing this order.</value>
        [DataMember(Name = "CustomerId", EmitDefaultValue = false)]
        public int CustomerId { get; set; }

        /// <summary>
        /// Customer type. Usually 1 for private customers and 2 for companies. This field is customer specific
        /// </summary>
        /// <value>Customer type. Usually 1 for private customers and 2 for companies. This field is customer specific</value>
        [DataMember(Name = "CustomerTypeId", EmitDefaultValue = false)]
        public int CustomerTypeId { get; set; }

        /// <summary>
        /// Datetime when the order was created.
        /// </summary>
        /// <value>Datetime when the order was created.</value>
        [DataMember(Name = "CreatedAt", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Datetime when the order was last updated.
        /// </summary>
        /// <value>Datetime when the order was last updated.</value>
        [DataMember(Name = "UpdatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// The DateTime when the order was completed (delivered, payed).
        /// </summary>
        /// <value>The DateTime when the order was completed (delivered, payed).</value>
        [DataMember(Name = "CompletedAt", EmitDefaultValue = false)]
        public DateTime CompletedAt { get; set; }

        /// <summary>
        /// The order status. Possbile values: cancelled, on-hold, inactive, refunded, partial,  pending-payment, out-of-stock, backorder, completed, pending.
        /// </summary>
        /// <value>The order status. Possbile values: cancelled, on-hold, inactive, refunded, partial,  pending-payment, out-of-stock, backorder, completed, pending.</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// ISO Currency code.
        /// </summary>
        /// <value>ISO Currency code.</value>
        [DataMember(Name = "Currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// The Currency Rate to SEK.
        /// </summary>
        /// <value>The Currency Rate to SEK.</value>
        [DataMember(Name = "CurrencyRate", EmitDefaultValue = false)]
        public double CurrencyRate { get; set; }

        /// <summary>
        /// The unique identifier for the market this order originates from.
        /// </summary>
        /// <value>The unique identifier for the market this order originates from.</value>
        [DataMember(Name = "MarketId", EmitDefaultValue = false)]
        public int MarketId { get; set; }

        /// <summary>
        /// The market name. Usually this is the equal to the site name.
        /// </summary>
        /// <value>The market name. Usually this is the equal to the site name.</value>
        [DataMember(Name = "MarketName", EmitDefaultValue = false)]
        public string MarketName { get; set; }

        /// <summary>
        /// Two-letter Language code.
        /// </summary>
        /// <value>Two-letter Language code.</value>
        [DataMember(Name = "Language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Order total.
        /// </summary>
        /// <value>Order total.</value>
        [DataMember(Name = "OrderTotal", EmitDefaultValue = false)]
        public double OrderTotal { get; set; }

        /// <summary>
        /// Expected total sum to be paid after discount and balance.   &lt;para&gt;The value is usually taken directly from the payment provider and represents the actual reserved amount.&lt;/para&gt;&lt;para&gt;If this differs from OrderTotal, actions should be taken to ensure they match. This usually happens due to rounding.&lt;/para&gt;
        /// </summary>
        /// <value>Expected total sum to be paid after discount and balance.   &lt;para&gt;The value is usually taken directly from the payment provider and represents the actual reserved amount.&lt;/para&gt;&lt;para&gt;If this differs from OrderTotal, actions should be taken to ensure they match. This usually happens due to rounding.&lt;/para&gt;</value>
        [DataMember(Name = "ExpectedSum", EmitDefaultValue = false)]
        public double ExpectedSum { get; set; }

        /// <summary>
        /// Order VAT total.
        /// </summary>
        /// <value>Order VAT total.</value>
        [DataMember(Name = "VATTotal", EmitDefaultValue = false)]
        public double VATTotal { get; set; }

        /// <summary>
        /// Order value inc vat after discount but before balance
        /// </summary>
        /// <value>Order value inc vat after discount but before balance</value>
        [DataMember(Name = "OrderValueIncVat", EmitDefaultValue = false)]
        public double OrderValueIncVat { get; set; }

        /// <summary>
        /// Order value ex vat after discount but before balance
        /// </summary>
        /// <value>Order value ex vat after discount but before balance</value>
        [DataMember(Name = "OrderValueExVat", EmitDefaultValue = false)]
        public double OrderValueExVat { get; set; }

        /// <summary>
        /// Item value inc vat excluding fees and discount
        /// </summary>
        /// <value>Item value inc vat excluding fees and discount</value>
        [DataMember(Name = "ItemValueIncVat", EmitDefaultValue = false)]
        public double ItemValueIncVat { get; set; }

        /// <summary>
        /// Item value ex vat excluding fees and discount
        /// </summary>
        /// <value>Item value ex vat excluding fees and discount</value>
        [DataMember(Name = "ItemValueExVat", EmitDefaultValue = false)]
        public double ItemValueExVat { get; set; }

        /// <summary>
        /// Total discount inc vat.
        /// </summary>
        /// <value>Total discount inc vat.</value>
        [DataMember(Name = "Discount", EmitDefaultValue = false)]
        public double Discount { get; set; }

        /// <summary>
        /// Total discount ex vat.
        /// </summary>
        /// <value>Total discount ex vat.</value>
        [DataMember(Name = "DiscountExVat", EmitDefaultValue = false)]
        public double DiscountExVat { get; set; }

        /// <summary>
        /// The amount which was withdrawn from the customers balance inc vat.
        /// </summary>
        /// <value>The amount which was withdrawn from the customers balance inc vat.</value>
        [DataMember(Name = "FromBalance", EmitDefaultValue = false)]
        public double FromBalance { get; set; }

        /// <summary>
        /// Shipping fee inc vat.
        /// </summary>
        /// <value>Shipping fee inc vat.</value>
        [DataMember(Name = "ShippingFee", EmitDefaultValue = false)]
        public double ShippingFee { get; set; }

        /// <summary>
        /// Shipping fee ex vat.
        /// </summary>
        /// <value>Shipping fee ex vat.</value>
        [DataMember(Name = "ShippingFeeExVat", EmitDefaultValue = false)]
        public double ShippingFeeExVat { get; set; }

        /// <summary>
        /// Payment fee inc vat.
        /// </summary>
        /// <value>Payment fee inc vat.</value>
        [DataMember(Name = "PaymentFee", EmitDefaultValue = false)]
        public double PaymentFee { get; set; }

        /// <summary>
        /// Payment fee ex vat.
        /// </summary>
        /// <value>Payment fee ex vat.</value>
        [DataMember(Name = "PaymentFeeExVat", EmitDefaultValue = false)]
        public double PaymentFeeExVat { get; set; }

        /// <summary>
        /// Order message. Can contain instructions from customer or added details about the order.
        /// </summary>
        /// <value>Order message. Can contain instructions from customer or added details about the order.</value>
        [DataMember(Name = "Message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Internal order messages. Can contain internal details about the order.
        /// </summary>
        /// <value>Internal order messages. Can contain internal details about the order.</value>
        [DataMember(Name = "OrderMessages", EmitDefaultValue = false)]
        public List<string> OrderMessages { get; set; }

        /// <summary>
        /// List of payment details &lt;seealso cref&#x3D;\&quot;T:Order.Models.PaymentDetail\&quot; /&gt;.
        /// </summary>
        /// <value>List of payment details &lt;seealso cref&#x3D;\&quot;T:Order.Models.PaymentDetail\&quot; /&gt;.</value>
        [DataMember(Name = "PaymentDetails", EmitDefaultValue = false)]
        public List<OrderModelsPaymentDetail> PaymentDetails { get; set; }

        /// <summary>
        /// List of shipping details &lt;seealso cref&#x3D;\&quot;T:Order.Models.ShippingDetail\&quot; /&gt;.
        /// </summary>
        /// <value>List of shipping details &lt;seealso cref&#x3D;\&quot;T:Order.Models.ShippingDetail\&quot; /&gt;.</value>
        [DataMember(Name = "ShippingDetails", EmitDefaultValue = false)]
        public List<OrderModelsShippingDetail> ShippingDetails { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name = "ShippingAddress", EmitDefaultValue = false)]
        public OrderModelsAddress ShippingAddress { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name = "BillingAddress", EmitDefaultValue = false)]
        public OrderModelsAddress BillingAddress { get; set; }

        /// <summary>
        /// List of order rows
        /// </summary>
        /// <value>List of order rows</value>
        [DataMember(Name = "Rows", EmitDefaultValue = false)]
        public List<OrderModelsOrderRow> Rows { get; set; }

        /// <summary>
        /// List of order refunds &lt;seealso cref&#x3D;\&quot;T:Order.Models.Refund\&quot; /&gt;.
        /// </summary>
        /// <value>List of order refunds &lt;seealso cref&#x3D;\&quot;T:Order.Models.Refund\&quot; /&gt;.</value>
        [DataMember(Name = "Refunds", EmitDefaultValue = false)]
        public List<OrderModelsRefund> Refunds { get; set; }

        /// <summary>
        /// Customer IP-number.
        /// </summary>
        /// <value>Customer IP-number.</value>
        [DataMember(Name = "Ip", EmitDefaultValue = false)]
        public string Ip { get; set; }

        /// <summary>
        /// Customer User Agent.
        /// </summary>
        /// <value>Customer User Agent.</value>
        [DataMember(Name = "UserAgent", EmitDefaultValue = false)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Chosen service location.
        /// </summary>
        /// <value>Chosen service location.</value>
        [DataMember(Name = "ServiceLocation", EmitDefaultValue = false)]
        public string ServiceLocation { get; set; }

        /// <summary>
        /// Campaign code applied to the order.
        /// </summary>
        /// <value>Campaign code applied to the order.</value>
        [DataMember(Name = "CampaignCode", EmitDefaultValue = false)]
        public string CampaignCode { get; set; }

        /// <summary>
        /// The internal id of the applied campaign code.
        /// </summary>
        /// <value>The internal id of the applied campaign code.</value>
        [DataMember(Name = "CampaignCodeId", EmitDefaultValue = false)]
        public int CampaignCodeId { get; set; }

        /// <summary>
        /// General percent discount applied to the order.
        /// </summary>
        /// <value>General percent discount applied to the order.</value>
        [DataMember(Name = "Percent", EmitDefaultValue = false)]
        public int Percent { get; set; }

        /// <summary>
        /// The desired delivery date of the order.
        /// </summary>
        /// <value>The desired delivery date of the order.</value>
        [DataMember(Name = "DesiredDeliveryDate", EmitDefaultValue = false)]
        public DateTime DesiredDeliveryDate { get; set; }

        /// <summary>
        /// The gender of the customer. True &#x3D; male, False &#x3D; female, null &#x3D; unknown.
        /// </summary>
        /// <value>The gender of the customer. True &#x3D; male, False &#x3D; female, null &#x3D; unknown.</value>
        [DataMember(Name = "Gender", EmitDefaultValue = true)]
        public bool Gender { get; set; }

        /// <summary>
        /// The unique identifier for the cart from which this order originates.
        /// </summary>
        /// <value>The unique identifier for the cart from which this order originates.</value>
        [DataMember(Name = "CartId", EmitDefaultValue = false)]
        public int CartId { get; set; }

        /// <summary>
        /// The session id for the from which this order originates.
        /// </summary>
        /// <value>The session id for the from which this order originates.</value>
        [DataMember(Name = "SessionId", EmitDefaultValue = false)]
        public string SessionId { get; set; }

        /// <summary>
        /// The ids for the campaigns applied to this order (not rows)
        /// </summary>
        /// <value>The ids for the campaigns applied to this order (not rows)</value>
        [DataMember(Name = "CampaignIds", EmitDefaultValue = false)]
        public List<string> CampaignIds { get; set; }

        /// <summary>
        /// The names for the campaigns applied to this order (not rows)
        /// </summary>
        /// <value>The names for the campaigns applied to this order (not rows)</value>
        [DataMember(Name = "CampaignNames", EmitDefaultValue = false)]
        public List<string> CampaignNames { get; set; }

        /// <summary>
        /// The order meta data to store additional information about the order. Eg. customer specific shipping data to include for nShift checkout (former UDC) shipments
        /// </summary>
        /// <value>The order meta data to store additional information about the order. Eg. customer specific shipping data to include for nShift checkout (former UDC) shipments</value>
        [DataMember(Name = "MetaData", EmitDefaultValue = false)]
        public Dictionary<string, string> MetaData { get; set; }

        /// <summary>
        /// The public id of this order.
        /// </summary>
        /// <value>The public id of this order.</value>
        [DataMember(Name = "PublicId", EmitDefaultValue = false)]
        public Guid PublicId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderModelsOrder {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  PersonalId: ").Append(PersonalId).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  CustomerTypeId: ").Append(CustomerTypeId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CurrencyRate: ").Append(CurrencyRate).Append("\n");
            sb.Append("  MarketId: ").Append(MarketId).Append("\n");
            sb.Append("  MarketName: ").Append(MarketName).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  OrderTotal: ").Append(OrderTotal).Append("\n");
            sb.Append("  ExpectedSum: ").Append(ExpectedSum).Append("\n");
            sb.Append("  VATTotal: ").Append(VATTotal).Append("\n");
            sb.Append("  OrderValueIncVat: ").Append(OrderValueIncVat).Append("\n");
            sb.Append("  OrderValueExVat: ").Append(OrderValueExVat).Append("\n");
            sb.Append("  ItemValueIncVat: ").Append(ItemValueIncVat).Append("\n");
            sb.Append("  ItemValueExVat: ").Append(ItemValueExVat).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  DiscountExVat: ").Append(DiscountExVat).Append("\n");
            sb.Append("  FromBalance: ").Append(FromBalance).Append("\n");
            sb.Append("  ShippingFee: ").Append(ShippingFee).Append("\n");
            sb.Append("  ShippingFeeExVat: ").Append(ShippingFeeExVat).Append("\n");
            sb.Append("  PaymentFee: ").Append(PaymentFee).Append("\n");
            sb.Append("  PaymentFeeExVat: ").Append(PaymentFeeExVat).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  OrderMessages: ").Append(OrderMessages).Append("\n");
            sb.Append("  PaymentDetails: ").Append(PaymentDetails).Append("\n");
            sb.Append("  ShippingDetails: ").Append(ShippingDetails).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  Rows: ").Append(Rows).Append("\n");
            sb.Append("  Refunds: ").Append(Refunds).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("  ServiceLocation: ").Append(ServiceLocation).Append("\n");
            sb.Append("  CampaignCode: ").Append(CampaignCode).Append("\n");
            sb.Append("  CampaignCodeId: ").Append(CampaignCodeId).Append("\n");
            sb.Append("  Percent: ").Append(Percent).Append("\n");
            sb.Append("  DesiredDeliveryDate: ").Append(DesiredDeliveryDate).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  CartId: ").Append(CartId).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  ExternalOrderStatus: ").Append(ExternalOrderStatus).Append("\n");
            sb.Append("  CampaignIds: ").Append(CampaignIds).Append("\n");
            sb.Append("  CampaignNames: ").Append(CampaignNames).Append("\n");
            sb.Append("  MetaData: ").Append(MetaData).Append("\n");
            sb.Append("  PublicId: ").Append(PublicId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderModelsOrder);
        }

        /// <summary>
        /// Returns true if OrderModelsOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderModelsOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderModelsOrder input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.PersonalId == input.PersonalId ||
                    (this.PersonalId != null &&
                    this.PersonalId.Equals(input.PersonalId))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    this.CustomerId.Equals(input.CustomerId)
                ) && 
                (
                    this.CustomerTypeId == input.CustomerTypeId ||
                    this.CustomerTypeId.Equals(input.CustomerTypeId)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.CompletedAt == input.CompletedAt ||
                    (this.CompletedAt != null &&
                    this.CompletedAt.Equals(input.CompletedAt))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.CurrencyRate == input.CurrencyRate ||
                    this.CurrencyRate.Equals(input.CurrencyRate)
                ) && 
                (
                    this.MarketId == input.MarketId ||
                    this.MarketId.Equals(input.MarketId)
                ) && 
                (
                    this.MarketName == input.MarketName ||
                    (this.MarketName != null &&
                    this.MarketName.Equals(input.MarketName))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.OrderTotal == input.OrderTotal ||
                    this.OrderTotal.Equals(input.OrderTotal)
                ) && 
                (
                    this.ExpectedSum == input.ExpectedSum ||
                    this.ExpectedSum.Equals(input.ExpectedSum)
                ) && 
                (
                    this.VATTotal == input.VATTotal ||
                    this.VATTotal.Equals(input.VATTotal)
                ) && 
                (
                    this.OrderValueIncVat == input.OrderValueIncVat ||
                    this.OrderValueIncVat.Equals(input.OrderValueIncVat)
                ) && 
                (
                    this.OrderValueExVat == input.OrderValueExVat ||
                    this.OrderValueExVat.Equals(input.OrderValueExVat)
                ) && 
                (
                    this.ItemValueIncVat == input.ItemValueIncVat ||
                    this.ItemValueIncVat.Equals(input.ItemValueIncVat)
                ) && 
                (
                    this.ItemValueExVat == input.ItemValueExVat ||
                    this.ItemValueExVat.Equals(input.ItemValueExVat)
                ) && 
                (
                    this.Discount == input.Discount ||
                    this.Discount.Equals(input.Discount)
                ) && 
                (
                    this.DiscountExVat == input.DiscountExVat ||
                    this.DiscountExVat.Equals(input.DiscountExVat)
                ) && 
                (
                    this.FromBalance == input.FromBalance ||
                    this.FromBalance.Equals(input.FromBalance)
                ) && 
                (
                    this.ShippingFee == input.ShippingFee ||
                    this.ShippingFee.Equals(input.ShippingFee)
                ) && 
                (
                    this.ShippingFeeExVat == input.ShippingFeeExVat ||
                    this.ShippingFeeExVat.Equals(input.ShippingFeeExVat)
                ) && 
                (
                    this.PaymentFee == input.PaymentFee ||
                    this.PaymentFee.Equals(input.PaymentFee)
                ) && 
                (
                    this.PaymentFeeExVat == input.PaymentFeeExVat ||
                    this.PaymentFeeExVat.Equals(input.PaymentFeeExVat)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.OrderMessages == input.OrderMessages ||
                    this.OrderMessages != null &&
                    input.OrderMessages != null &&
                    this.OrderMessages.SequenceEqual(input.OrderMessages)
                ) && 
                (
                    this.PaymentDetails == input.PaymentDetails ||
                    this.PaymentDetails != null &&
                    input.PaymentDetails != null &&
                    this.PaymentDetails.SequenceEqual(input.PaymentDetails)
                ) && 
                (
                    this.ShippingDetails == input.ShippingDetails ||
                    this.ShippingDetails != null &&
                    input.ShippingDetails != null &&
                    this.ShippingDetails.SequenceEqual(input.ShippingDetails)
                ) && 
                (
                    this.ShippingAddress == input.ShippingAddress ||
                    (this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(input.ShippingAddress))
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.Rows == input.Rows ||
                    this.Rows != null &&
                    input.Rows != null &&
                    this.Rows.SequenceEqual(input.Rows)
                ) && 
                (
                    this.Refunds == input.Refunds ||
                    this.Refunds != null &&
                    input.Refunds != null &&
                    this.Refunds.SequenceEqual(input.Refunds)
                ) && 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.UserAgent == input.UserAgent ||
                    (this.UserAgent != null &&
                    this.UserAgent.Equals(input.UserAgent))
                ) && 
                (
                    this.ServiceLocation == input.ServiceLocation ||
                    (this.ServiceLocation != null &&
                    this.ServiceLocation.Equals(input.ServiceLocation))
                ) && 
                (
                    this.CampaignCode == input.CampaignCode ||
                    (this.CampaignCode != null &&
                    this.CampaignCode.Equals(input.CampaignCode))
                ) && 
                (
                    this.CampaignCodeId == input.CampaignCodeId ||
                    this.CampaignCodeId.Equals(input.CampaignCodeId)
                ) && 
                (
                    this.Percent == input.Percent ||
                    this.Percent.Equals(input.Percent)
                ) && 
                (
                    this.DesiredDeliveryDate == input.DesiredDeliveryDate ||
                    (this.DesiredDeliveryDate != null &&
                    this.DesiredDeliveryDate.Equals(input.DesiredDeliveryDate))
                ) && 
                (
                    this.Gender == input.Gender ||
                    this.Gender.Equals(input.Gender)
                ) && 
                (
                    this.CartId == input.CartId ||
                    this.CartId.Equals(input.CartId)
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.ExternalOrderStatus == input.ExternalOrderStatus ||
                    this.ExternalOrderStatus.Equals(input.ExternalOrderStatus)
                ) && 
                (
                    this.CampaignIds == input.CampaignIds ||
                    this.CampaignIds != null &&
                    input.CampaignIds != null &&
                    this.CampaignIds.SequenceEqual(input.CampaignIds)
                ) && 
                (
                    this.CampaignNames == input.CampaignNames ||
                    this.CampaignNames != null &&
                    input.CampaignNames != null &&
                    this.CampaignNames.SequenceEqual(input.CampaignNames)
                ) && 
                (
                    this.MetaData == input.MetaData ||
                    this.MetaData != null &&
                    input.MetaData != null &&
                    this.MetaData.SequenceEqual(input.MetaData)
                ) && 
                (
                    this.PublicId == input.PublicId ||
                    (this.PublicId != null &&
                    this.PublicId.Equals(input.PublicId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.ExternalId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalId.GetHashCode();
                }
                if (this.PersonalId != null)
                {
                    hashCode = (hashCode * 59) + this.PersonalId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CustomerId.GetHashCode();
                hashCode = (hashCode * 59) + this.CustomerTypeId.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.CompletedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedAt.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrencyRate.GetHashCode();
                hashCode = (hashCode * 59) + this.MarketId.GetHashCode();
                if (this.MarketName != null)
                {
                    hashCode = (hashCode * 59) + this.MarketName.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderTotal.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpectedSum.GetHashCode();
                hashCode = (hashCode * 59) + this.VATTotal.GetHashCode();
                hashCode = (hashCode * 59) + this.OrderValueIncVat.GetHashCode();
                hashCode = (hashCode * 59) + this.OrderValueExVat.GetHashCode();
                hashCode = (hashCode * 59) + this.ItemValueIncVat.GetHashCode();
                hashCode = (hashCode * 59) + this.ItemValueExVat.GetHashCode();
                hashCode = (hashCode * 59) + this.Discount.GetHashCode();
                hashCode = (hashCode * 59) + this.DiscountExVat.GetHashCode();
                hashCode = (hashCode * 59) + this.FromBalance.GetHashCode();
                hashCode = (hashCode * 59) + this.ShippingFee.GetHashCode();
                hashCode = (hashCode * 59) + this.ShippingFeeExVat.GetHashCode();
                hashCode = (hashCode * 59) + this.PaymentFee.GetHashCode();
                hashCode = (hashCode * 59) + this.PaymentFeeExVat.GetHashCode();
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.OrderMessages != null)
                {
                    hashCode = (hashCode * 59) + this.OrderMessages.GetHashCode();
                }
                if (this.PaymentDetails != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentDetails.GetHashCode();
                }
                if (this.ShippingDetails != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingDetails.GetHashCode();
                }
                if (this.ShippingAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingAddress.GetHashCode();
                }
                if (this.BillingAddress != null)
                {
                    hashCode = (hashCode * 59) + this.BillingAddress.GetHashCode();
                }
                if (this.Rows != null)
                {
                    hashCode = (hashCode * 59) + this.Rows.GetHashCode();
                }
                if (this.Refunds != null)
                {
                    hashCode = (hashCode * 59) + this.Refunds.GetHashCode();
                }
                if (this.Ip != null)
                {
                    hashCode = (hashCode * 59) + this.Ip.GetHashCode();
                }
                if (this.UserAgent != null)
                {
                    hashCode = (hashCode * 59) + this.UserAgent.GetHashCode();
                }
                if (this.ServiceLocation != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceLocation.GetHashCode();
                }
                if (this.CampaignCode != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CampaignCodeId.GetHashCode();
                hashCode = (hashCode * 59) + this.Percent.GetHashCode();
                if (this.DesiredDeliveryDate != null)
                {
                    hashCode = (hashCode * 59) + this.DesiredDeliveryDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Gender.GetHashCode();
                hashCode = (hashCode * 59) + this.CartId.GetHashCode();
                if (this.SessionId != null)
                {
                    hashCode = (hashCode * 59) + this.SessionId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExternalOrderStatus.GetHashCode();
                if (this.CampaignIds != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignIds.GetHashCode();
                }
                if (this.CampaignNames != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignNames.GetHashCode();
                }
                if (this.MetaData != null)
                {
                    hashCode = (hashCode * 59) + this.MetaData.GetHashCode();
                }
                if (this.PublicId != null)
                {
                    hashCode = (hashCode * 59) + this.PublicId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
