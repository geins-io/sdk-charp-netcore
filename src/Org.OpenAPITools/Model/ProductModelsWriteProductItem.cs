/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A product item belonging to a product.
    /// </summary>
    [DataContract(Name = "Product.Models.Write.ProductItem")]
    public partial class ProductModelsWriteProductItem : IEquatable<ProductModelsWriteProductItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductModelsWriteProductItem" /> class.
        /// </summary>
        /// <param name="itemId">Id of the product item..</param>
        /// <param name="articleNumber">The article number for the product item..</param>
        /// <param name="name">The name of the product item..</param>
        /// <param name="shelf">The shelf name where the product item can be found..</param>
        /// <param name="weight">The weight of the item in grams (g)..</param>
        /// <param name="length">The length of the item in millimeters (mm)..</param>
        /// <param name="width">The width of the item in millimeters (mm)..</param>
        /// <param name="height">The height of the item in millimeters (mm)..</param>
        /// <param name="gtin">The GTIN number for the item..</param>
        /// <param name="active">The current state of the item..</param>
        /// <param name="externalId">External Id of the product item..</param>
        public ProductModelsWriteProductItem(int itemId = default(int), string articleNumber = default(string), string name = default(string), string shelf = default(string), int weight = default(int), int length = default(int), int width = default(int), int height = default(int), string gtin = default(string), bool active = default(bool), string externalId = default(string))
        {
            this.ItemId = itemId;
            this.ArticleNumber = articleNumber;
            this.Name = name;
            this.Shelf = shelf;
            this.Weight = weight;
            this.Length = length;
            this.Width = width;
            this.Height = height;
            this.Gtin = gtin;
            this.Active = active;
            this.ExternalId = externalId;
        }

        /// <summary>
        /// Id of the product item.
        /// </summary>
        /// <value>Id of the product item.</value>
        [DataMember(Name = "ItemId", EmitDefaultValue = false)]
        public int ItemId { get; set; }

        /// <summary>
        /// The article number for the product item.
        /// </summary>
        /// <value>The article number for the product item.</value>
        [DataMember(Name = "ArticleNumber", EmitDefaultValue = false)]
        public string ArticleNumber { get; set; }

        /// <summary>
        /// The name of the product item.
        /// </summary>
        /// <value>The name of the product item.</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The shelf name where the product item can be found.
        /// </summary>
        /// <value>The shelf name where the product item can be found.</value>
        [DataMember(Name = "Shelf", EmitDefaultValue = false)]
        public string Shelf { get; set; }

        /// <summary>
        /// The weight of the item in grams (g).
        /// </summary>
        /// <value>The weight of the item in grams (g).</value>
        [DataMember(Name = "Weight", EmitDefaultValue = false)]
        public int Weight { get; set; }

        /// <summary>
        /// The length of the item in millimeters (mm).
        /// </summary>
        /// <value>The length of the item in millimeters (mm).</value>
        [DataMember(Name = "Length", EmitDefaultValue = false)]
        public int Length { get; set; }

        /// <summary>
        /// The width of the item in millimeters (mm).
        /// </summary>
        /// <value>The width of the item in millimeters (mm).</value>
        [DataMember(Name = "Width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// The height of the item in millimeters (mm).
        /// </summary>
        /// <value>The height of the item in millimeters (mm).</value>
        [DataMember(Name = "Height", EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// The GTIN number for the item.
        /// </summary>
        /// <value>The GTIN number for the item.</value>
        [DataMember(Name = "Gtin", EmitDefaultValue = false)]
        public string Gtin { get; set; }

        /// <summary>
        /// The current state of the item.
        /// </summary>
        /// <value>The current state of the item.</value>
        [DataMember(Name = "Active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// External Id of the product item.
        /// </summary>
        /// <value>External Id of the product item.</value>
        [DataMember(Name = "ExternalId", EmitDefaultValue = false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductModelsWriteProductItem {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ArticleNumber: ").Append(ArticleNumber).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Shelf: ").Append(Shelf).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Gtin: ").Append(Gtin).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductModelsWriteProductItem);
        }

        /// <summary>
        /// Returns true if ProductModelsWriteProductItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductModelsWriteProductItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductModelsWriteProductItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ItemId == input.ItemId ||
                    this.ItemId.Equals(input.ItemId)
                ) && 
                (
                    this.ArticleNumber == input.ArticleNumber ||
                    (this.ArticleNumber != null &&
                    this.ArticleNumber.Equals(input.ArticleNumber))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Shelf == input.Shelf ||
                    (this.Shelf != null &&
                    this.Shelf.Equals(input.Shelf))
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                ) && 
                (
                    this.Length == input.Length ||
                    this.Length.Equals(input.Length)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.Gtin == input.Gtin ||
                    (this.Gtin != null &&
                    this.Gtin.Equals(input.Gtin))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ItemId.GetHashCode();
                if (this.ArticleNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ArticleNumber.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Shelf != null)
                {
                    hashCode = (hashCode * 59) + this.Shelf.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Weight.GetHashCode();
                hashCode = (hashCode * 59) + this.Length.GetHashCode();
                hashCode = (hashCode * 59) + this.Width.GetHashCode();
                hashCode = (hashCode * 59) + this.Height.GetHashCode();
                if (this.Gtin != null)
                {
                    hashCode = (hashCode * 59) + this.Gtin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.ExternalId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
