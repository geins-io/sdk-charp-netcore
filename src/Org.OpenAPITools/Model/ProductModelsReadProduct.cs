/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A product.
    /// </summary>
    [DataContract(Name = "Product.Models.Read.Product")]
    public partial class ProductModelsReadProduct : IEquatable<ProductModelsReadProduct>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductModelsReadProduct" /> class.
        /// </summary>
        /// <param name="productId">The unique identifier for the product..</param>
        /// <param name="articleNumber">The article number of the product..</param>
        /// <param name="names">The localized names of the product..</param>
        /// <param name="dateCreated">The date the product was created..</param>
        /// <param name="dateUpdated">The date the product was last updated..</param>
        /// <param name="active">The current state of the product..</param>
        /// <param name="purchasePrice">The purchase price in the currency defined in {Product.Models.Read.Product.PurchasePriceCurrency}..</param>
        /// <param name="purchasePriceCurrency">The 3-letter ISO 4217 currency code for the amount given in {Product.Models.Read.Product.PurchasePrice}..</param>
        /// <param name="shortTexts">Localized short texts for the product..</param>
        /// <param name="longTexts">Localized long texts for the product..</param>
        /// <param name="techTexts">Localized tech texts for the product..</param>
        /// <param name="items">The items belonging to the product..</param>
        /// <param name="prices">The current prices of the product..</param>
        /// <param name="categories">The categories the product belongs to..</param>
        /// <param name="images">The images for the product.</param>
        /// <param name="brandId">The brand id of the product..</param>
        /// <param name="brandName">The brand name of the product..</param>
        /// <param name="supplierId">The supplier id of the product..</param>
        /// <param name="supplierName">The supplier name of the product..</param>
        /// <param name="parameterValues">The parameter values associated with the product..</param>
        /// <param name="variants">The variants for this product..</param>
        /// <param name="markets">The markets for this product.</param>
        /// <param name="vat">The vat percent for this product. Eg) 0.25 meaning 25% VAT..</param>
        /// <param name="primaryImage">The filename of this products primary image..</param>
        /// <param name="freightClassId">ID of freight class.</param>
        /// <param name="intrastatCode">Intrastat code of the product.</param>
        /// <param name="countryOfOrigin">Country of orgin of product.</param>
        /// <param name="variantGroupId">ID of Variant Group to which the product is associated.</param>
        /// <param name="vatId">ID of Vat.</param>
        /// <param name="externalId">External Id of the product..</param>
        /// <param name="activationDate">Activation date for the product..</param>
        /// <param name="feeds">The feeds the product is a member of.</param>
        /// <param name="urls">All canonical urls for the product.</param>
        /// <param name="mainCategoryId">The main category id for the product..</param>
        /// <param name="relatedProducts">The related products for the product..</param>
        public ProductModelsReadProduct(int productId = default(int), string articleNumber = default(string), List<SharedModelsLocalizableContent> names = default(List<SharedModelsLocalizableContent>), DateTime dateCreated = default(DateTime), DateTime dateUpdated = default(DateTime), bool active = default(bool), double purchasePrice = default(double), string purchasePriceCurrency = default(string), List<SharedModelsLocalizableContent> shortTexts = default(List<SharedModelsLocalizableContent>), List<SharedModelsLocalizableContent> longTexts = default(List<SharedModelsLocalizableContent>), List<SharedModelsLocalizableContent> techTexts = default(List<SharedModelsLocalizableContent>), List<ProductModelsReadProductItem> items = default(List<ProductModelsReadProductItem>), List<PriceListModelsReadPriceListPrice> prices = default(List<PriceListModelsReadPriceListPrice>), List<CategoryModelsReadCategory> categories = default(List<CategoryModelsReadCategory>), List<ProductModelsReadImage> images = default(List<ProductModelsReadImage>), int brandId = default(int), string brandName = default(string), int supplierId = default(int), string supplierName = default(string), List<ProductParameterModelsReadProductParameterValue> parameterValues = default(List<ProductParameterModelsReadProductParameterValue>), List<VariantModelsReadVariant> variants = default(List<VariantModelsReadVariant>), List<MarketModelsMarket> markets = default(List<MarketModelsMarket>), double vat = default(double), string primaryImage = default(string), int freightClassId = default(int), string intrastatCode = default(string), string countryOfOrigin = default(string), int variantGroupId = default(int), int vatId = default(int), string externalId = default(string), DateTime activationDate = default(DateTime), List<ProductModelsReadFeedMembership> feeds = default(List<ProductModelsReadFeedMembership>), List<ProductModelsReadProductUrl> urls = default(List<ProductModelsReadProductUrl>), int mainCategoryId = default(int), List<ProductModelsReadRelatedProduct> relatedProducts = default(List<ProductModelsReadRelatedProduct>))
        {
            this.ProductId = productId;
            this.ArticleNumber = articleNumber;
            this.Names = names;
            this.DateCreated = dateCreated;
            this.DateUpdated = dateUpdated;
            this.Active = active;
            this.PurchasePrice = purchasePrice;
            this.PurchasePriceCurrency = purchasePriceCurrency;
            this.ShortTexts = shortTexts;
            this.LongTexts = longTexts;
            this.TechTexts = techTexts;
            this.Items = items;
            this.Prices = prices;
            this.Categories = categories;
            this.Images = images;
            this.BrandId = brandId;
            this.BrandName = brandName;
            this.SupplierId = supplierId;
            this.SupplierName = supplierName;
            this.ParameterValues = parameterValues;
            this.Variants = variants;
            this.Markets = markets;
            this.Vat = vat;
            this.PrimaryImage = primaryImage;
            this.FreightClassId = freightClassId;
            this.IntrastatCode = intrastatCode;
            this.CountryOfOrigin = countryOfOrigin;
            this.VariantGroupId = variantGroupId;
            this.VatId = vatId;
            this.ExternalId = externalId;
            this.ActivationDate = activationDate;
            this.Feeds = feeds;
            this.Urls = urls;
            this.MainCategoryId = mainCategoryId;
            this.RelatedProducts = relatedProducts;
        }

        /// <summary>
        /// The unique identifier for the product.
        /// </summary>
        /// <value>The unique identifier for the product.</value>
        [DataMember(Name = "ProductId", EmitDefaultValue = false)]
        public int ProductId { get; set; }

        /// <summary>
        /// The article number of the product.
        /// </summary>
        /// <value>The article number of the product.</value>
        [DataMember(Name = "ArticleNumber", EmitDefaultValue = false)]
        public string ArticleNumber { get; set; }

        /// <summary>
        /// The localized names of the product.
        /// </summary>
        /// <value>The localized names of the product.</value>
        [DataMember(Name = "Names", EmitDefaultValue = false)]
        public List<SharedModelsLocalizableContent> Names { get; set; }

        /// <summary>
        /// The date the product was created.
        /// </summary>
        /// <value>The date the product was created.</value>
        [DataMember(Name = "DateCreated", EmitDefaultValue = false)]
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// The date the product was last updated.
        /// </summary>
        /// <value>The date the product was last updated.</value>
        [DataMember(Name = "DateUpdated", EmitDefaultValue = false)]
        public DateTime DateUpdated { get; set; }

        /// <summary>
        /// The current state of the product.
        /// </summary>
        /// <value>The current state of the product.</value>
        [DataMember(Name = "Active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// The purchase price in the currency defined in {Product.Models.Read.Product.PurchasePriceCurrency}.
        /// </summary>
        /// <value>The purchase price in the currency defined in {Product.Models.Read.Product.PurchasePriceCurrency}.</value>
        [DataMember(Name = "PurchasePrice", EmitDefaultValue = false)]
        public double PurchasePrice { get; set; }

        /// <summary>
        /// The 3-letter ISO 4217 currency code for the amount given in {Product.Models.Read.Product.PurchasePrice}.
        /// </summary>
        /// <value>The 3-letter ISO 4217 currency code for the amount given in {Product.Models.Read.Product.PurchasePrice}.</value>
        [DataMember(Name = "PurchasePriceCurrency", EmitDefaultValue = false)]
        public string PurchasePriceCurrency { get; set; }

        /// <summary>
        /// Localized short texts for the product.
        /// </summary>
        /// <value>Localized short texts for the product.</value>
        [DataMember(Name = "ShortTexts", EmitDefaultValue = false)]
        public List<SharedModelsLocalizableContent> ShortTexts { get; set; }

        /// <summary>
        /// Localized long texts for the product.
        /// </summary>
        /// <value>Localized long texts for the product.</value>
        [DataMember(Name = "LongTexts", EmitDefaultValue = false)]
        public List<SharedModelsLocalizableContent> LongTexts { get; set; }

        /// <summary>
        /// Localized tech texts for the product.
        /// </summary>
        /// <value>Localized tech texts for the product.</value>
        [DataMember(Name = "TechTexts", EmitDefaultValue = false)]
        public List<SharedModelsLocalizableContent> TechTexts { get; set; }

        /// <summary>
        /// The items belonging to the product.
        /// </summary>
        /// <value>The items belonging to the product.</value>
        [DataMember(Name = "Items", EmitDefaultValue = false)]
        public List<ProductModelsReadProductItem> Items { get; set; }

        /// <summary>
        /// The current prices of the product.
        /// </summary>
        /// <value>The current prices of the product.</value>
        [DataMember(Name = "Prices", EmitDefaultValue = false)]
        public List<PriceListModelsReadPriceListPrice> Prices { get; set; }

        /// <summary>
        /// The categories the product belongs to.
        /// </summary>
        /// <value>The categories the product belongs to.</value>
        [DataMember(Name = "Categories", EmitDefaultValue = false)]
        public List<CategoryModelsReadCategory> Categories { get; set; }

        /// <summary>
        /// The images for the product
        /// </summary>
        /// <value>The images for the product</value>
        [DataMember(Name = "Images", EmitDefaultValue = false)]
        public List<ProductModelsReadImage> Images { get; set; }

        /// <summary>
        /// The brand id of the product.
        /// </summary>
        /// <value>The brand id of the product.</value>
        [DataMember(Name = "BrandId", EmitDefaultValue = false)]
        public int BrandId { get; set; }

        /// <summary>
        /// The brand name of the product.
        /// </summary>
        /// <value>The brand name of the product.</value>
        [DataMember(Name = "BrandName", EmitDefaultValue = false)]
        public string BrandName { get; set; }

        /// <summary>
        /// The supplier id of the product.
        /// </summary>
        /// <value>The supplier id of the product.</value>
        [DataMember(Name = "SupplierId", EmitDefaultValue = false)]
        public int SupplierId { get; set; }

        /// <summary>
        /// The supplier name of the product.
        /// </summary>
        /// <value>The supplier name of the product.</value>
        [DataMember(Name = "SupplierName", EmitDefaultValue = false)]
        public string SupplierName { get; set; }

        /// <summary>
        /// The parameter values associated with the product.
        /// </summary>
        /// <value>The parameter values associated with the product.</value>
        [DataMember(Name = "ParameterValues", EmitDefaultValue = false)]
        public List<ProductParameterModelsReadProductParameterValue> ParameterValues { get; set; }

        /// <summary>
        /// The variants for this product.
        /// </summary>
        /// <value>The variants for this product.</value>
        [DataMember(Name = "Variants", EmitDefaultValue = false)]
        public List<VariantModelsReadVariant> Variants { get; set; }

        /// <summary>
        /// The markets for this product
        /// </summary>
        /// <value>The markets for this product</value>
        [DataMember(Name = "Markets", EmitDefaultValue = false)]
        public List<MarketModelsMarket> Markets { get; set; }

        /// <summary>
        /// The vat percent for this product. Eg) 0.25 meaning 25% VAT.
        /// </summary>
        /// <value>The vat percent for this product. Eg) 0.25 meaning 25% VAT.</value>
        [DataMember(Name = "Vat", EmitDefaultValue = false)]
        public double Vat { get; set; }

        /// <summary>
        /// The filename of this products primary image.
        /// </summary>
        /// <value>The filename of this products primary image.</value>
        [DataMember(Name = "PrimaryImage", EmitDefaultValue = false)]
        public string PrimaryImage { get; set; }

        /// <summary>
        /// ID of freight class
        /// </summary>
        /// <value>ID of freight class</value>
        [DataMember(Name = "FreightClassId", EmitDefaultValue = false)]
        public int FreightClassId { get; set; }

        /// <summary>
        /// Intrastat code of the product
        /// </summary>
        /// <value>Intrastat code of the product</value>
        [DataMember(Name = "IntrastatCode", EmitDefaultValue = false)]
        public string IntrastatCode { get; set; }

        /// <summary>
        /// Country of orgin of product
        /// </summary>
        /// <value>Country of orgin of product</value>
        [DataMember(Name = "CountryOfOrigin", EmitDefaultValue = false)]
        public string CountryOfOrigin { get; set; }

        /// <summary>
        /// ID of Variant Group to which the product is associated
        /// </summary>
        /// <value>ID of Variant Group to which the product is associated</value>
        [DataMember(Name = "VariantGroupId", EmitDefaultValue = false)]
        public int VariantGroupId { get; set; }

        /// <summary>
        /// ID of Vat
        /// </summary>
        /// <value>ID of Vat</value>
        [DataMember(Name = "VatId", EmitDefaultValue = false)]
        public int VatId { get; set; }

        /// <summary>
        /// External Id of the product.
        /// </summary>
        /// <value>External Id of the product.</value>
        [DataMember(Name = "ExternalId", EmitDefaultValue = false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Activation date for the product.
        /// </summary>
        /// <value>Activation date for the product.</value>
        [DataMember(Name = "ActivationDate", EmitDefaultValue = false)]
        public DateTime ActivationDate { get; set; }

        /// <summary>
        /// The feeds the product is a member of
        /// </summary>
        /// <value>The feeds the product is a member of</value>
        [DataMember(Name = "Feeds", EmitDefaultValue = false)]
        public List<ProductModelsReadFeedMembership> Feeds { get; set; }

        /// <summary>
        /// All canonical urls for the product
        /// </summary>
        /// <value>All canonical urls for the product</value>
        [DataMember(Name = "Urls", EmitDefaultValue = false)]
        public List<ProductModelsReadProductUrl> Urls { get; set; }

        /// <summary>
        /// The main category id for the product.
        /// </summary>
        /// <value>The main category id for the product.</value>
        [DataMember(Name = "MainCategoryId", EmitDefaultValue = false)]
        public int MainCategoryId { get; set; }

        /// <summary>
        /// The related products for the product.
        /// </summary>
        /// <value>The related products for the product.</value>
        [DataMember(Name = "RelatedProducts", EmitDefaultValue = false)]
        public List<ProductModelsReadRelatedProduct> RelatedProducts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductModelsReadProduct {\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ArticleNumber: ").Append(ArticleNumber).Append("\n");
            sb.Append("  Names: ").Append(Names).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateUpdated: ").Append(DateUpdated).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  PurchasePrice: ").Append(PurchasePrice).Append("\n");
            sb.Append("  PurchasePriceCurrency: ").Append(PurchasePriceCurrency).Append("\n");
            sb.Append("  ShortTexts: ").Append(ShortTexts).Append("\n");
            sb.Append("  LongTexts: ").Append(LongTexts).Append("\n");
            sb.Append("  TechTexts: ").Append(TechTexts).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Prices: ").Append(Prices).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  SupplierId: ").Append(SupplierId).Append("\n");
            sb.Append("  SupplierName: ").Append(SupplierName).Append("\n");
            sb.Append("  ParameterValues: ").Append(ParameterValues).Append("\n");
            sb.Append("  Variants: ").Append(Variants).Append("\n");
            sb.Append("  Markets: ").Append(Markets).Append("\n");
            sb.Append("  Vat: ").Append(Vat).Append("\n");
            sb.Append("  PrimaryImage: ").Append(PrimaryImage).Append("\n");
            sb.Append("  FreightClassId: ").Append(FreightClassId).Append("\n");
            sb.Append("  IntrastatCode: ").Append(IntrastatCode).Append("\n");
            sb.Append("  CountryOfOrigin: ").Append(CountryOfOrigin).Append("\n");
            sb.Append("  VariantGroupId: ").Append(VariantGroupId).Append("\n");
            sb.Append("  VatId: ").Append(VatId).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  ActivationDate: ").Append(ActivationDate).Append("\n");
            sb.Append("  Feeds: ").Append(Feeds).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  MainCategoryId: ").Append(MainCategoryId).Append("\n");
            sb.Append("  RelatedProducts: ").Append(RelatedProducts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductModelsReadProduct);
        }

        /// <summary>
        /// Returns true if ProductModelsReadProduct instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductModelsReadProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductModelsReadProduct input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProductId == input.ProductId ||
                    this.ProductId.Equals(input.ProductId)
                ) && 
                (
                    this.ArticleNumber == input.ArticleNumber ||
                    (this.ArticleNumber != null &&
                    this.ArticleNumber.Equals(input.ArticleNumber))
                ) && 
                (
                    this.Names == input.Names ||
                    this.Names != null &&
                    input.Names != null &&
                    this.Names.SequenceEqual(input.Names)
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.DateUpdated == input.DateUpdated ||
                    (this.DateUpdated != null &&
                    this.DateUpdated.Equals(input.DateUpdated))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.PurchasePrice == input.PurchasePrice ||
                    this.PurchasePrice.Equals(input.PurchasePrice)
                ) && 
                (
                    this.PurchasePriceCurrency == input.PurchasePriceCurrency ||
                    (this.PurchasePriceCurrency != null &&
                    this.PurchasePriceCurrency.Equals(input.PurchasePriceCurrency))
                ) && 
                (
                    this.ShortTexts == input.ShortTexts ||
                    this.ShortTexts != null &&
                    input.ShortTexts != null &&
                    this.ShortTexts.SequenceEqual(input.ShortTexts)
                ) && 
                (
                    this.LongTexts == input.LongTexts ||
                    this.LongTexts != null &&
                    input.LongTexts != null &&
                    this.LongTexts.SequenceEqual(input.LongTexts)
                ) && 
                (
                    this.TechTexts == input.TechTexts ||
                    this.TechTexts != null &&
                    input.TechTexts != null &&
                    this.TechTexts.SequenceEqual(input.TechTexts)
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.Prices == input.Prices ||
                    this.Prices != null &&
                    input.Prices != null &&
                    this.Prices.SequenceEqual(input.Prices)
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    input.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                ) && 
                (
                    this.BrandId == input.BrandId ||
                    this.BrandId.Equals(input.BrandId)
                ) && 
                (
                    this.BrandName == input.BrandName ||
                    (this.BrandName != null &&
                    this.BrandName.Equals(input.BrandName))
                ) && 
                (
                    this.SupplierId == input.SupplierId ||
                    this.SupplierId.Equals(input.SupplierId)
                ) && 
                (
                    this.SupplierName == input.SupplierName ||
                    (this.SupplierName != null &&
                    this.SupplierName.Equals(input.SupplierName))
                ) && 
                (
                    this.ParameterValues == input.ParameterValues ||
                    this.ParameterValues != null &&
                    input.ParameterValues != null &&
                    this.ParameterValues.SequenceEqual(input.ParameterValues)
                ) && 
                (
                    this.Variants == input.Variants ||
                    this.Variants != null &&
                    input.Variants != null &&
                    this.Variants.SequenceEqual(input.Variants)
                ) && 
                (
                    this.Markets == input.Markets ||
                    this.Markets != null &&
                    input.Markets != null &&
                    this.Markets.SequenceEqual(input.Markets)
                ) && 
                (
                    this.Vat == input.Vat ||
                    this.Vat.Equals(input.Vat)
                ) && 
                (
                    this.PrimaryImage == input.PrimaryImage ||
                    (this.PrimaryImage != null &&
                    this.PrimaryImage.Equals(input.PrimaryImage))
                ) && 
                (
                    this.FreightClassId == input.FreightClassId ||
                    this.FreightClassId.Equals(input.FreightClassId)
                ) && 
                (
                    this.IntrastatCode == input.IntrastatCode ||
                    (this.IntrastatCode != null &&
                    this.IntrastatCode.Equals(input.IntrastatCode))
                ) && 
                (
                    this.CountryOfOrigin == input.CountryOfOrigin ||
                    (this.CountryOfOrigin != null &&
                    this.CountryOfOrigin.Equals(input.CountryOfOrigin))
                ) && 
                (
                    this.VariantGroupId == input.VariantGroupId ||
                    this.VariantGroupId.Equals(input.VariantGroupId)
                ) && 
                (
                    this.VatId == input.VatId ||
                    this.VatId.Equals(input.VatId)
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.ActivationDate == input.ActivationDate ||
                    (this.ActivationDate != null &&
                    this.ActivationDate.Equals(input.ActivationDate))
                ) && 
                (
                    this.Feeds == input.Feeds ||
                    this.Feeds != null &&
                    input.Feeds != null &&
                    this.Feeds.SequenceEqual(input.Feeds)
                ) && 
                (
                    this.Urls == input.Urls ||
                    this.Urls != null &&
                    input.Urls != null &&
                    this.Urls.SequenceEqual(input.Urls)
                ) && 
                (
                    this.MainCategoryId == input.MainCategoryId ||
                    this.MainCategoryId.Equals(input.MainCategoryId)
                ) && 
                (
                    this.RelatedProducts == input.RelatedProducts ||
                    this.RelatedProducts != null &&
                    input.RelatedProducts != null &&
                    this.RelatedProducts.SequenceEqual(input.RelatedProducts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ProductId.GetHashCode();
                if (this.ArticleNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ArticleNumber.GetHashCode();
                }
                if (this.Names != null)
                {
                    hashCode = (hashCode * 59) + this.Names.GetHashCode();
                }
                if (this.DateCreated != null)
                {
                    hashCode = (hashCode * 59) + this.DateCreated.GetHashCode();
                }
                if (this.DateUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.DateUpdated.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                hashCode = (hashCode * 59) + this.PurchasePrice.GetHashCode();
                if (this.PurchasePriceCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.PurchasePriceCurrency.GetHashCode();
                }
                if (this.ShortTexts != null)
                {
                    hashCode = (hashCode * 59) + this.ShortTexts.GetHashCode();
                }
                if (this.LongTexts != null)
                {
                    hashCode = (hashCode * 59) + this.LongTexts.GetHashCode();
                }
                if (this.TechTexts != null)
                {
                    hashCode = (hashCode * 59) + this.TechTexts.GetHashCode();
                }
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                if (this.Prices != null)
                {
                    hashCode = (hashCode * 59) + this.Prices.GetHashCode();
                }
                if (this.Categories != null)
                {
                    hashCode = (hashCode * 59) + this.Categories.GetHashCode();
                }
                if (this.Images != null)
                {
                    hashCode = (hashCode * 59) + this.Images.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BrandId.GetHashCode();
                if (this.BrandName != null)
                {
                    hashCode = (hashCode * 59) + this.BrandName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SupplierId.GetHashCode();
                if (this.SupplierName != null)
                {
                    hashCode = (hashCode * 59) + this.SupplierName.GetHashCode();
                }
                if (this.ParameterValues != null)
                {
                    hashCode = (hashCode * 59) + this.ParameterValues.GetHashCode();
                }
                if (this.Variants != null)
                {
                    hashCode = (hashCode * 59) + this.Variants.GetHashCode();
                }
                if (this.Markets != null)
                {
                    hashCode = (hashCode * 59) + this.Markets.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Vat.GetHashCode();
                if (this.PrimaryImage != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryImage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FreightClassId.GetHashCode();
                if (this.IntrastatCode != null)
                {
                    hashCode = (hashCode * 59) + this.IntrastatCode.GetHashCode();
                }
                if (this.CountryOfOrigin != null)
                {
                    hashCode = (hashCode * 59) + this.CountryOfOrigin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VariantGroupId.GetHashCode();
                hashCode = (hashCode * 59) + this.VatId.GetHashCode();
                if (this.ExternalId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalId.GetHashCode();
                }
                if (this.ActivationDate != null)
                {
                    hashCode = (hashCode * 59) + this.ActivationDate.GetHashCode();
                }
                if (this.Feeds != null)
                {
                    hashCode = (hashCode * 59) + this.Feeds.GetHashCode();
                }
                if (this.Urls != null)
                {
                    hashCode = (hashCode * 59) + this.Urls.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MainCategoryId.GetHashCode();
                if (this.RelatedProducts != null)
                {
                    hashCode = (hashCode * 59) + this.RelatedProducts.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
