/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A price for a product on a specific price list.
    /// </summary>
    [DataContract(Name = "PriceList.Models.Write.PriceListPrice")]
    public partial class PriceListModelsWritePriceListPrice : IEquatable<PriceListModelsWritePriceListPrice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceListModelsWritePriceListPrice" /> class.
        /// </summary>
        /// <param name="priceListId">The price list id..</param>
        /// <param name="price">The price in the currency of the associated price list..</param>
        /// <param name="productId">The id of the product that this price applies to..</param>
        /// <param name="currency">The 3-letter ISO 4217 currency code for this price. If ommitted the price will be updated on the default market..</param>
        /// <param name="staggeredCount">Staggered count for this price. Defaults to 1..</param>
        public PriceListModelsWritePriceListPrice(int priceListId = default(int), double price = default(double), string productId = default(string), string currency = default(string), int staggeredCount = default(int))
        {
            this.PriceListId = priceListId;
            this.Price = price;
            this.ProductId = productId;
            this.Currency = currency;
            this.StaggeredCount = staggeredCount;
        }

        /// <summary>
        /// The price list id.
        /// </summary>
        /// <value>The price list id.</value>
        [DataMember(Name = "PriceListId", EmitDefaultValue = false)]
        public int PriceListId { get; set; }

        /// <summary>
        /// The price in the currency of the associated price list.
        /// </summary>
        /// <value>The price in the currency of the associated price list.</value>
        [DataMember(Name = "Price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// The id of the product that this price applies to.
        /// </summary>
        /// <value>The id of the product that this price applies to.</value>
        [DataMember(Name = "ProductId", EmitDefaultValue = false)]
        public string ProductId { get; set; }

        /// <summary>
        /// The 3-letter ISO 4217 currency code for this price. If ommitted the price will be updated on the default market.
        /// </summary>
        /// <value>The 3-letter ISO 4217 currency code for this price. If ommitted the price will be updated on the default market.</value>
        [DataMember(Name = "Currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Staggered count for this price. Defaults to 1.
        /// </summary>
        /// <value>Staggered count for this price. Defaults to 1.</value>
        [DataMember(Name = "StaggeredCount", EmitDefaultValue = false)]
        public int StaggeredCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PriceListModelsWritePriceListPrice {\n");
            sb.Append("  PriceListId: ").Append(PriceListId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  StaggeredCount: ").Append(StaggeredCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PriceListModelsWritePriceListPrice);
        }

        /// <summary>
        /// Returns true if PriceListModelsWritePriceListPrice instances are equal
        /// </summary>
        /// <param name="input">Instance of PriceListModelsWritePriceListPrice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceListModelsWritePriceListPrice input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PriceListId == input.PriceListId ||
                    this.PriceListId.Equals(input.PriceListId)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.StaggeredCount == input.StaggeredCount ||
                    this.StaggeredCount.Equals(input.StaggeredCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PriceListId.GetHashCode();
                hashCode = (hashCode * 59) + this.Price.GetHashCode();
                if (this.ProductId != null)
                {
                    hashCode = (hashCode * 59) + this.ProductId.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StaggeredCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
