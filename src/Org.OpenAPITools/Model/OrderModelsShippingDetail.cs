/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Data carrier for a shipping detail
    /// </summary>
    [DataContract(Name = "Order.Models.ShippingDetail")]
    public partial class OrderModelsShippingDetail : IEquatable<OrderModelsShippingDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderModelsShippingDetail" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for this shipping detail.</param>
        /// <param name="shippingId">Id of the sipping method.</param>
        /// <param name="name">Name of the shipping method.</param>
        /// <param name="parcelNumber">Parcel number (tracking number).</param>
        /// <param name="shippingDate">Shipping date.</param>
        /// <param name="trackingUrl">Tracking URL.</param>
        /// <param name="externalDeliveryOptionId">Delivery option id of the external shipping provider.</param>
        /// <param name="externalServiceId">Service id of the external shipping provider.</param>
        /// <param name="externalCarrierId">Carrier id of the external shipping provider.</param>
        /// <param name="pickupPoint">Pickup point.</param>
        public OrderModelsShippingDetail(int id = default(int), int shippingId = default(int), string name = default(string), string parcelNumber = default(string), DateTime shippingDate = default(DateTime), string trackingUrl = default(string), string externalDeliveryOptionId = default(string), string externalServiceId = default(string), string externalCarrierId = default(string), string pickupPoint = default(string))
        {
            this.Id = id;
            this.ShippingId = shippingId;
            this.Name = name;
            this.ParcelNumber = parcelNumber;
            this.ShippingDate = shippingDate;
            this.TrackingUrl = trackingUrl;
            this.ExternalDeliveryOptionId = externalDeliveryOptionId;
            this.ExternalServiceId = externalServiceId;
            this.ExternalCarrierId = externalCarrierId;
            this.PickupPoint = pickupPoint;
        }

        /// <summary>
        /// Unique identifier for this shipping detail
        /// </summary>
        /// <value>Unique identifier for this shipping detail</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Id of the sipping method
        /// </summary>
        /// <value>Id of the sipping method</value>
        [DataMember(Name = "ShippingId", EmitDefaultValue = false)]
        public int ShippingId { get; set; }

        /// <summary>
        /// Name of the shipping method
        /// </summary>
        /// <value>Name of the shipping method</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Parcel number (tracking number)
        /// </summary>
        /// <value>Parcel number (tracking number)</value>
        [DataMember(Name = "ParcelNumber", EmitDefaultValue = false)]
        public string ParcelNumber { get; set; }

        /// <summary>
        /// Shipping date
        /// </summary>
        /// <value>Shipping date</value>
        [DataMember(Name = "ShippingDate", EmitDefaultValue = false)]
        public DateTime ShippingDate { get; set; }

        /// <summary>
        /// Tracking URL
        /// </summary>
        /// <value>Tracking URL</value>
        [DataMember(Name = "TrackingUrl", EmitDefaultValue = false)]
        public string TrackingUrl { get; set; }

        /// <summary>
        /// Delivery option id of the external shipping provider
        /// </summary>
        /// <value>Delivery option id of the external shipping provider</value>
        [DataMember(Name = "ExternalDeliveryOptionId", EmitDefaultValue = false)]
        public string ExternalDeliveryOptionId { get; set; }

        /// <summary>
        /// Service id of the external shipping provider
        /// </summary>
        /// <value>Service id of the external shipping provider</value>
        [DataMember(Name = "ExternalServiceId", EmitDefaultValue = false)]
        public string ExternalServiceId { get; set; }

        /// <summary>
        /// Carrier id of the external shipping provider
        /// </summary>
        /// <value>Carrier id of the external shipping provider</value>
        [DataMember(Name = "ExternalCarrierId", EmitDefaultValue = false)]
        public string ExternalCarrierId { get; set; }

        /// <summary>
        /// Pickup point
        /// </summary>
        /// <value>Pickup point</value>
        [DataMember(Name = "PickupPoint", EmitDefaultValue = false)]
        public string PickupPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderModelsShippingDetail {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ShippingId: ").Append(ShippingId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParcelNumber: ").Append(ParcelNumber).Append("\n");
            sb.Append("  ShippingDate: ").Append(ShippingDate).Append("\n");
            sb.Append("  TrackingUrl: ").Append(TrackingUrl).Append("\n");
            sb.Append("  ExternalDeliveryOptionId: ").Append(ExternalDeliveryOptionId).Append("\n");
            sb.Append("  ExternalServiceId: ").Append(ExternalServiceId).Append("\n");
            sb.Append("  ExternalCarrierId: ").Append(ExternalCarrierId).Append("\n");
            sb.Append("  PickupPoint: ").Append(PickupPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderModelsShippingDetail);
        }

        /// <summary>
        /// Returns true if OrderModelsShippingDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderModelsShippingDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderModelsShippingDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ShippingId == input.ShippingId ||
                    this.ShippingId.Equals(input.ShippingId)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ParcelNumber == input.ParcelNumber ||
                    (this.ParcelNumber != null &&
                    this.ParcelNumber.Equals(input.ParcelNumber))
                ) && 
                (
                    this.ShippingDate == input.ShippingDate ||
                    (this.ShippingDate != null &&
                    this.ShippingDate.Equals(input.ShippingDate))
                ) && 
                (
                    this.TrackingUrl == input.TrackingUrl ||
                    (this.TrackingUrl != null &&
                    this.TrackingUrl.Equals(input.TrackingUrl))
                ) && 
                (
                    this.ExternalDeliveryOptionId == input.ExternalDeliveryOptionId ||
                    (this.ExternalDeliveryOptionId != null &&
                    this.ExternalDeliveryOptionId.Equals(input.ExternalDeliveryOptionId))
                ) && 
                (
                    this.ExternalServiceId == input.ExternalServiceId ||
                    (this.ExternalServiceId != null &&
                    this.ExternalServiceId.Equals(input.ExternalServiceId))
                ) && 
                (
                    this.ExternalCarrierId == input.ExternalCarrierId ||
                    (this.ExternalCarrierId != null &&
                    this.ExternalCarrierId.Equals(input.ExternalCarrierId))
                ) && 
                (
                    this.PickupPoint == input.PickupPoint ||
                    (this.PickupPoint != null &&
                    this.PickupPoint.Equals(input.PickupPoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.ShippingId.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ParcelNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ParcelNumber.GetHashCode();
                }
                if (this.ShippingDate != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingDate.GetHashCode();
                }
                if (this.TrackingUrl != null)
                {
                    hashCode = (hashCode * 59) + this.TrackingUrl.GetHashCode();
                }
                if (this.ExternalDeliveryOptionId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalDeliveryOptionId.GetHashCode();
                }
                if (this.ExternalServiceId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalServiceId.GetHashCode();
                }
                if (this.ExternalCarrierId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalCarrierId.GetHashCode();
                }
                if (this.PickupPoint != null)
                {
                    hashCode = (hashCode * 59) + this.PickupPoint.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
