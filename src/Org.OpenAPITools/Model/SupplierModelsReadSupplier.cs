/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A product supplier.
    /// </summary>
    [DataContract(Name = "Supplier.Models.Read.Supplier")]
    public partial class SupplierModelsReadSupplier : IEquatable<SupplierModelsReadSupplier>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SupplierModelsReadSupplier" /> class.
        /// </summary>
        /// <param name="supplierId">The unique identifier for the supplier..</param>
        /// <param name="name">The name of the supplier..</param>
        /// <param name="address1">The first address line of the supplier..</param>
        /// <param name="address2">The second address line of the supplier..</param>
        /// <param name="address3">The third address line of the supplier..</param>
        /// <param name="zipCode">The zip code of the supplier..</param>
        /// <param name="country">The country of the supplier..</param>
        /// <param name="contactPerson">The contact person of the supplier..</param>
        /// <param name="phone1">The primary phone number of the supplier..</param>
        /// <param name="phone2">The secondary phone number of the supplier..</param>
        /// <param name="email">The email address of the supplier..</param>
        /// <param name="externalId">External Id of the supplier..</param>
        public SupplierModelsReadSupplier(int supplierId = default(int), string name = default(string), string address1 = default(string), string address2 = default(string), string address3 = default(string), string zipCode = default(string), string country = default(string), string contactPerson = default(string), string phone1 = default(string), string phone2 = default(string), string email = default(string), string externalId = default(string))
        {
            this.SupplierId = supplierId;
            this.Name = name;
            this.Address1 = address1;
            this.Address2 = address2;
            this.Address3 = address3;
            this.ZipCode = zipCode;
            this.Country = country;
            this.ContactPerson = contactPerson;
            this.Phone1 = phone1;
            this.Phone2 = phone2;
            this.Email = email;
            this.ExternalId = externalId;
        }

        /// <summary>
        /// The unique identifier for the supplier.
        /// </summary>
        /// <value>The unique identifier for the supplier.</value>
        [DataMember(Name = "SupplierId", EmitDefaultValue = false)]
        public int SupplierId { get; set; }

        /// <summary>
        /// The name of the supplier.
        /// </summary>
        /// <value>The name of the supplier.</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The first address line of the supplier.
        /// </summary>
        /// <value>The first address line of the supplier.</value>
        [DataMember(Name = "Address1", EmitDefaultValue = false)]
        public string Address1 { get; set; }

        /// <summary>
        /// The second address line of the supplier.
        /// </summary>
        /// <value>The second address line of the supplier.</value>
        [DataMember(Name = "Address2", EmitDefaultValue = false)]
        public string Address2 { get; set; }

        /// <summary>
        /// The third address line of the supplier.
        /// </summary>
        /// <value>The third address line of the supplier.</value>
        [DataMember(Name = "Address3", EmitDefaultValue = false)]
        public string Address3 { get; set; }

        /// <summary>
        /// The zip code of the supplier.
        /// </summary>
        /// <value>The zip code of the supplier.</value>
        [DataMember(Name = "ZipCode", EmitDefaultValue = false)]
        public string ZipCode { get; set; }

        /// <summary>
        /// The country of the supplier.
        /// </summary>
        /// <value>The country of the supplier.</value>
        [DataMember(Name = "Country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// The contact person of the supplier.
        /// </summary>
        /// <value>The contact person of the supplier.</value>
        [DataMember(Name = "ContactPerson", EmitDefaultValue = false)]
        public string ContactPerson { get; set; }

        /// <summary>
        /// The primary phone number of the supplier.
        /// </summary>
        /// <value>The primary phone number of the supplier.</value>
        [DataMember(Name = "Phone1", EmitDefaultValue = false)]
        public string Phone1 { get; set; }

        /// <summary>
        /// The secondary phone number of the supplier.
        /// </summary>
        /// <value>The secondary phone number of the supplier.</value>
        [DataMember(Name = "Phone2", EmitDefaultValue = false)]
        public string Phone2 { get; set; }

        /// <summary>
        /// The email address of the supplier.
        /// </summary>
        /// <value>The email address of the supplier.</value>
        [DataMember(Name = "Email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// External Id of the supplier.
        /// </summary>
        /// <value>External Id of the supplier.</value>
        [DataMember(Name = "ExternalId", EmitDefaultValue = false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SupplierModelsReadSupplier {\n");
            sb.Append("  SupplierId: ").Append(SupplierId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  Address3: ").Append(Address3).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  Phone1: ").Append(Phone1).Append("\n");
            sb.Append("  Phone2: ").Append(Phone2).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SupplierModelsReadSupplier);
        }

        /// <summary>
        /// Returns true if SupplierModelsReadSupplier instances are equal
        /// </summary>
        /// <param name="input">Instance of SupplierModelsReadSupplier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SupplierModelsReadSupplier input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SupplierId == input.SupplierId ||
                    this.SupplierId.Equals(input.SupplierId)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.Address3 == input.Address3 ||
                    (this.Address3 != null &&
                    this.Address3.Equals(input.Address3))
                ) && 
                (
                    this.ZipCode == input.ZipCode ||
                    (this.ZipCode != null &&
                    this.ZipCode.Equals(input.ZipCode))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.ContactPerson == input.ContactPerson ||
                    (this.ContactPerson != null &&
                    this.ContactPerson.Equals(input.ContactPerson))
                ) && 
                (
                    this.Phone1 == input.Phone1 ||
                    (this.Phone1 != null &&
                    this.Phone1.Equals(input.Phone1))
                ) && 
                (
                    this.Phone2 == input.Phone2 ||
                    (this.Phone2 != null &&
                    this.Phone2.Equals(input.Phone2))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SupplierId.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Address1 != null)
                {
                    hashCode = (hashCode * 59) + this.Address1.GetHashCode();
                }
                if (this.Address2 != null)
                {
                    hashCode = (hashCode * 59) + this.Address2.GetHashCode();
                }
                if (this.Address3 != null)
                {
                    hashCode = (hashCode * 59) + this.Address3.GetHashCode();
                }
                if (this.ZipCode != null)
                {
                    hashCode = (hashCode * 59) + this.ZipCode.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.ContactPerson != null)
                {
                    hashCode = (hashCode * 59) + this.ContactPerson.GetHashCode();
                }
                if (this.Phone1 != null)
                {
                    hashCode = (hashCode * 59) + this.Phone1.GetHashCode();
                }
                if (this.Phone2 != null)
                {
                    hashCode = (hashCode * 59) + this.Phone2.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.ExternalId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
