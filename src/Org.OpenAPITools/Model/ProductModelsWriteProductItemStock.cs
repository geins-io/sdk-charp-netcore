/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A stock value for a product item
    /// </summary>
    [DataContract(Name = "Product.Models.Write.ProductItemStock")]
    public partial class ProductModelsWriteProductItemStock : IEquatable<ProductModelsWriteProductItemStock>, IValidatableObject
    {
        /// <summary>
        /// The type of stock to be updated. See {Product.Models.ProductItemStockType}
        /// </summary>
        /// <value>The type of stock to be updated. See {Product.Models.ProductItemStockType}</value>
        public enum StockTypeEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2

        }


        /// <summary>
        /// The type of stock to be updated. See {Product.Models.ProductItemStockType}
        /// </summary>
        /// <value>The type of stock to be updated. See {Product.Models.ProductItemStockType}</value>
        [DataMember(Name = "StockType", EmitDefaultValue = false)]
        public StockTypeEnum? StockType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductModelsWriteProductItemStock" /> class.
        /// </summary>
        /// <param name="id">A value to uniquely identity a single product item.  &lt;remarks&gt;This value can represent different fields, depending on configuration.&lt;/remarks&gt;.</param>
        /// <param name="stock">The stock value..</param>
        /// <param name="stockSellable">The sellable stock value.  &lt;remarks&gt;This value is read only.&lt;/remarks&gt;.</param>
        /// <param name="stockType">The type of stock to be updated. See {Product.Models.ProductItemStockType}.</param>
        public ProductModelsWriteProductItemStock(string id = default(string), int stock = default(int), int stockSellable = default(int), StockTypeEnum? stockType = default(StockTypeEnum?))
        {
            this.Id = id;
            this.Stock = stock;
            this.StockSellable = stockSellable;
            this.StockType = stockType;
        }

        /// <summary>
        /// A value to uniquely identity a single product item.  &lt;remarks&gt;This value can represent different fields, depending on configuration.&lt;/remarks&gt;
        /// </summary>
        /// <value>A value to uniquely identity a single product item.  &lt;remarks&gt;This value can represent different fields, depending on configuration.&lt;/remarks&gt;</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The stock value.
        /// </summary>
        /// <value>The stock value.</value>
        [DataMember(Name = "Stock", EmitDefaultValue = false)]
        public int Stock { get; set; }

        /// <summary>
        /// The sellable stock value.  &lt;remarks&gt;This value is read only.&lt;/remarks&gt;
        /// </summary>
        /// <value>The sellable stock value.  &lt;remarks&gt;This value is read only.&lt;/remarks&gt;</value>
        [DataMember(Name = "StockSellable", EmitDefaultValue = false)]
        public int StockSellable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductModelsWriteProductItemStock {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("  StockSellable: ").Append(StockSellable).Append("\n");
            sb.Append("  StockType: ").Append(StockType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductModelsWriteProductItemStock);
        }

        /// <summary>
        /// Returns true if ProductModelsWriteProductItemStock instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductModelsWriteProductItemStock to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductModelsWriteProductItemStock input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Stock == input.Stock ||
                    this.Stock.Equals(input.Stock)
                ) && 
                (
                    this.StockSellable == input.StockSellable ||
                    this.StockSellable.Equals(input.StockSellable)
                ) && 
                (
                    this.StockType == input.StockType ||
                    this.StockType.Equals(input.StockType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Stock.GetHashCode();
                hashCode = (hashCode * 59) + this.StockSellable.GetHashCode();
                hashCode = (hashCode * 59) + this.StockType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
