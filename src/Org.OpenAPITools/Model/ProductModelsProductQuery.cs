/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A prroduct query.
    /// </summary>
    [DataContract(Name = "Product.Models.ProductQuery")]
    public partial class ProductModelsProductQuery : IEquatable<ProductModelsProductQuery>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductModelsProductQuery" /> class.
        /// </summary>
        /// <param name="updatedAfter">Limits query to products updated after the specified date..</param>
        /// <param name="productIds">Limits query to only include the supplied product ids..</param>
        /// <param name="articleNumbers">Limits query to only include products with supplied article numbers..</param>
        /// <param name="onlySellable">Limits query to only include products that are available for purchase.</param>
        /// <param name="feedId">Limits query to only include products contained in the specified feed..</param>
        /// <param name="batchId">Used to fetch products where the result set is split into batches.</param>
        public ProductModelsProductQuery(DateTime updatedAfter = default(DateTime), List<int> productIds = default(List<int>), List<string> articleNumbers = default(List<string>), bool onlySellable = default(bool), int feedId = default(int), Guid batchId = default(Guid))
        {
            this.UpdatedAfter = updatedAfter;
            this.ProductIds = productIds;
            this.ArticleNumbers = articleNumbers;
            this.OnlySellable = onlySellable;
            this.FeedId = feedId;
            this.BatchId = batchId;
        }

        /// <summary>
        /// Limits query to products updated after the specified date.
        /// </summary>
        /// <value>Limits query to products updated after the specified date.</value>
        [DataMember(Name = "UpdatedAfter", EmitDefaultValue = false)]
        public DateTime UpdatedAfter { get; set; }

        /// <summary>
        /// Limits query to only include the supplied product ids.
        /// </summary>
        /// <value>Limits query to only include the supplied product ids.</value>
        [DataMember(Name = "ProductIds", EmitDefaultValue = false)]
        public List<int> ProductIds { get; set; }

        /// <summary>
        /// Limits query to only include products with supplied article numbers.
        /// </summary>
        /// <value>Limits query to only include products with supplied article numbers.</value>
        [DataMember(Name = "ArticleNumbers", EmitDefaultValue = false)]
        public List<string> ArticleNumbers { get; set; }

        /// <summary>
        /// Limits query to only include products that are available for purchase
        /// </summary>
        /// <value>Limits query to only include products that are available for purchase</value>
        [DataMember(Name = "OnlySellable", EmitDefaultValue = true)]
        public bool OnlySellable { get; set; }

        /// <summary>
        /// Limits query to only include products contained in the specified feed.
        /// </summary>
        /// <value>Limits query to only include products contained in the specified feed.</value>
        [DataMember(Name = "FeedId", EmitDefaultValue = false)]
        public int FeedId { get; set; }

        /// <summary>
        /// Used to fetch products where the result set is split into batches
        /// </summary>
        /// <value>Used to fetch products where the result set is split into batches</value>
        [DataMember(Name = "BatchId", EmitDefaultValue = false)]
        public Guid BatchId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductModelsProductQuery {\n");
            sb.Append("  UpdatedAfter: ").Append(UpdatedAfter).Append("\n");
            sb.Append("  ProductIds: ").Append(ProductIds).Append("\n");
            sb.Append("  ArticleNumbers: ").Append(ArticleNumbers).Append("\n");
            sb.Append("  OnlySellable: ").Append(OnlySellable).Append("\n");
            sb.Append("  FeedId: ").Append(FeedId).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductModelsProductQuery);
        }

        /// <summary>
        /// Returns true if ProductModelsProductQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductModelsProductQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductModelsProductQuery input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UpdatedAfter == input.UpdatedAfter ||
                    (this.UpdatedAfter != null &&
                    this.UpdatedAfter.Equals(input.UpdatedAfter))
                ) && 
                (
                    this.ProductIds == input.ProductIds ||
                    this.ProductIds != null &&
                    input.ProductIds != null &&
                    this.ProductIds.SequenceEqual(input.ProductIds)
                ) && 
                (
                    this.ArticleNumbers == input.ArticleNumbers ||
                    this.ArticleNumbers != null &&
                    input.ArticleNumbers != null &&
                    this.ArticleNumbers.SequenceEqual(input.ArticleNumbers)
                ) && 
                (
                    this.OnlySellable == input.OnlySellable ||
                    this.OnlySellable.Equals(input.OnlySellable)
                ) && 
                (
                    this.FeedId == input.FeedId ||
                    this.FeedId.Equals(input.FeedId)
                ) && 
                (
                    this.BatchId == input.BatchId ||
                    (this.BatchId != null &&
                    this.BatchId.Equals(input.BatchId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UpdatedAfter != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAfter.GetHashCode();
                }
                if (this.ProductIds != null)
                {
                    hashCode = (hashCode * 59) + this.ProductIds.GetHashCode();
                }
                if (this.ArticleNumbers != null)
                {
                    hashCode = (hashCode * 59) + this.ArticleNumbers.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OnlySellable.GetHashCode();
                hashCode = (hashCode * 59) + this.FeedId.GetHashCode();
                if (this.BatchId != null)
                {
                    hashCode = (hashCode * 59) + this.BatchId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
