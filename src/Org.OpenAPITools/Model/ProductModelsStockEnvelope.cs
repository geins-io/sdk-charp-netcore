/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The response of a Stock request.
    /// </summary>
    [DataContract(Name = "Product.Models.StockEnvelope")]
    public partial class ProductModelsStockEnvelope : IEquatable<ProductModelsStockEnvelope>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductModelsStockEnvelope" /> class.
        /// </summary>
        /// <param name="message">Information about the outcome of the request..</param>
        /// <param name="invalid">Supplied productItemStocks that failed validation..</param>
        /// <param name="notFound">Supplied productItemStocks that were technically valid, but couldn&#39;t be found..</param>
        /// <param name="updateCount">Number of stock updates resulting from the request..</param>
        public ProductModelsStockEnvelope(string message = default(string), List<ProductModelsWriteProductItemStock> invalid = default(List<ProductModelsWriteProductItemStock>), List<ProductModelsWriteProductItemStock> notFound = default(List<ProductModelsWriteProductItemStock>), int updateCount = default(int))
        {
            this.Message = message;
            this.Invalid = invalid;
            this.NotFound = notFound;
            this.UpdateCount = updateCount;
        }

        /// <summary>
        /// Information about the outcome of the request.
        /// </summary>
        /// <value>Information about the outcome of the request.</value>
        [DataMember(Name = "Message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Supplied productItemStocks that failed validation.
        /// </summary>
        /// <value>Supplied productItemStocks that failed validation.</value>
        [DataMember(Name = "Invalid", EmitDefaultValue = false)]
        public List<ProductModelsWriteProductItemStock> Invalid { get; set; }

        /// <summary>
        /// Supplied productItemStocks that were technically valid, but couldn&#39;t be found.
        /// </summary>
        /// <value>Supplied productItemStocks that were technically valid, but couldn&#39;t be found.</value>
        [DataMember(Name = "NotFound", EmitDefaultValue = false)]
        public List<ProductModelsWriteProductItemStock> NotFound { get; set; }

        /// <summary>
        /// Number of stock updates resulting from the request.
        /// </summary>
        /// <value>Number of stock updates resulting from the request.</value>
        [DataMember(Name = "UpdateCount", EmitDefaultValue = false)]
        public int UpdateCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductModelsStockEnvelope {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Invalid: ").Append(Invalid).Append("\n");
            sb.Append("  NotFound: ").Append(NotFound).Append("\n");
            sb.Append("  UpdateCount: ").Append(UpdateCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductModelsStockEnvelope);
        }

        /// <summary>
        /// Returns true if ProductModelsStockEnvelope instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductModelsStockEnvelope to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductModelsStockEnvelope input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Invalid == input.Invalid ||
                    this.Invalid != null &&
                    input.Invalid != null &&
                    this.Invalid.SequenceEqual(input.Invalid)
                ) && 
                (
                    this.NotFound == input.NotFound ||
                    this.NotFound != null &&
                    input.NotFound != null &&
                    this.NotFound.SequenceEqual(input.NotFound)
                ) && 
                (
                    this.UpdateCount == input.UpdateCount ||
                    this.UpdateCount.Equals(input.UpdateCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.Invalid != null)
                {
                    hashCode = (hashCode * 59) + this.Invalid.GetHashCode();
                }
                if (this.NotFound != null)
                {
                    hashCode = (hashCode * 59) + this.NotFound.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UpdateCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
