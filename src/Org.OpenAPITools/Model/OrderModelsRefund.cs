/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Data carrier for a refund
    /// </summary>
    [DataContract(Name = "Order.Models.Refund")]
    public partial class OrderModelsRefund : IEquatable<OrderModelsRefund>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderModelsRefund" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for this refund.</param>
        /// <param name="orderRowId">Reference to the order row that has been refunded.</param>
        /// <param name="paymentDetailId">Reference to the payment detail that has been refunded.</param>
        /// <param name="returnId">Id number of the return. Can be used to group refunds..</param>
        /// <param name="articleNumber">Article number. If the refund is not bound to an order row this field contains an optional refund article number..</param>
        /// <param name="createdAt">Datetime when the refund was created.</param>
        /// <param name="total">Total amount refunded.</param>
        /// <param name="reasonCode">Reason code for the refund.</param>
        /// <param name="reason">Reason for refund.</param>
        /// <param name="toBalance">Shows if the refund was deposited to the customers balance.</param>
        /// <param name="vat">Vat percent in decimals for the refunded amount.</param>
        /// <param name="itemId">Item ID (SKU)..</param>
        /// <param name="refundType">Refund Type.</param>
        public OrderModelsRefund(int id = default(int), int orderRowId = default(int), int paymentDetailId = default(int), int returnId = default(int), string articleNumber = default(string), DateTime createdAt = default(DateTime), double total = default(double), int reasonCode = default(int), string reason = default(string), bool toBalance = default(bool), double vat = default(double), int itemId = default(int), string refundType = default(string))
        {
            this.Id = id;
            this.OrderRowId = orderRowId;
            this.PaymentDetailId = paymentDetailId;
            this.ReturnId = returnId;
            this.ArticleNumber = articleNumber;
            this.CreatedAt = createdAt;
            this.Total = total;
            this.ReasonCode = reasonCode;
            this.Reason = reason;
            this.ToBalance = toBalance;
            this.Vat = vat;
            this.ItemId = itemId;
            this.RefundType = refundType;
        }

        /// <summary>
        /// Unique identifier for this refund
        /// </summary>
        /// <value>Unique identifier for this refund</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Reference to the order row that has been refunded
        /// </summary>
        /// <value>Reference to the order row that has been refunded</value>
        [DataMember(Name = "OrderRowId", EmitDefaultValue = false)]
        public int OrderRowId { get; set; }

        /// <summary>
        /// Reference to the payment detail that has been refunded
        /// </summary>
        /// <value>Reference to the payment detail that has been refunded</value>
        [DataMember(Name = "PaymentDetailId", EmitDefaultValue = false)]
        public int PaymentDetailId { get; set; }

        /// <summary>
        /// Id number of the return. Can be used to group refunds.
        /// </summary>
        /// <value>Id number of the return. Can be used to group refunds.</value>
        [DataMember(Name = "ReturnId", EmitDefaultValue = false)]
        public int ReturnId { get; set; }

        /// <summary>
        /// Article number. If the refund is not bound to an order row this field contains an optional refund article number.
        /// </summary>
        /// <value>Article number. If the refund is not bound to an order row this field contains an optional refund article number.</value>
        [DataMember(Name = "ArticleNumber", EmitDefaultValue = false)]
        public string ArticleNumber { get; set; }

        /// <summary>
        /// Datetime when the refund was created
        /// </summary>
        /// <value>Datetime when the refund was created</value>
        [DataMember(Name = "CreatedAt", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Total amount refunded
        /// </summary>
        /// <value>Total amount refunded</value>
        [DataMember(Name = "Total", EmitDefaultValue = false)]
        public double Total { get; set; }

        /// <summary>
        /// Reason code for the refund
        /// </summary>
        /// <value>Reason code for the refund</value>
        [DataMember(Name = "ReasonCode", EmitDefaultValue = false)]
        public int ReasonCode { get; set; }

        /// <summary>
        /// Reason for refund
        /// </summary>
        /// <value>Reason for refund</value>
        [DataMember(Name = "Reason", EmitDefaultValue = false)]
        public string Reason { get; set; }

        /// <summary>
        /// Shows if the refund was deposited to the customers balance
        /// </summary>
        /// <value>Shows if the refund was deposited to the customers balance</value>
        [DataMember(Name = "ToBalance", EmitDefaultValue = true)]
        public bool ToBalance { get; set; }

        /// <summary>
        /// Vat percent in decimals for the refunded amount
        /// </summary>
        /// <value>Vat percent in decimals for the refunded amount</value>
        [DataMember(Name = "Vat", EmitDefaultValue = false)]
        public double Vat { get; set; }

        /// <summary>
        /// Item ID (SKU).
        /// </summary>
        /// <value>Item ID (SKU).</value>
        [DataMember(Name = "ItemId", EmitDefaultValue = false)]
        public int ItemId { get; set; }

        /// <summary>
        /// Refund Type
        /// </summary>
        /// <value>Refund Type</value>
        [DataMember(Name = "RefundType", EmitDefaultValue = false)]
        public string RefundType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderModelsRefund {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrderRowId: ").Append(OrderRowId).Append("\n");
            sb.Append("  PaymentDetailId: ").Append(PaymentDetailId).Append("\n");
            sb.Append("  ReturnId: ").Append(ReturnId).Append("\n");
            sb.Append("  ArticleNumber: ").Append(ArticleNumber).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ToBalance: ").Append(ToBalance).Append("\n");
            sb.Append("  Vat: ").Append(Vat).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  RefundType: ").Append(RefundType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderModelsRefund);
        }

        /// <summary>
        /// Returns true if OrderModelsRefund instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderModelsRefund to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderModelsRefund input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.OrderRowId == input.OrderRowId ||
                    this.OrderRowId.Equals(input.OrderRowId)
                ) && 
                (
                    this.PaymentDetailId == input.PaymentDetailId ||
                    this.PaymentDetailId.Equals(input.PaymentDetailId)
                ) && 
                (
                    this.ReturnId == input.ReturnId ||
                    this.ReturnId.Equals(input.ReturnId)
                ) && 
                (
                    this.ArticleNumber == input.ArticleNumber ||
                    (this.ArticleNumber != null &&
                    this.ArticleNumber.Equals(input.ArticleNumber))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.ReasonCode == input.ReasonCode ||
                    this.ReasonCode.Equals(input.ReasonCode)
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.ToBalance == input.ToBalance ||
                    this.ToBalance.Equals(input.ToBalance)
                ) && 
                (
                    this.Vat == input.Vat ||
                    this.Vat.Equals(input.Vat)
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    this.ItemId.Equals(input.ItemId)
                ) && 
                (
                    this.RefundType == input.RefundType ||
                    (this.RefundType != null &&
                    this.RefundType.Equals(input.RefundType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.OrderRowId.GetHashCode();
                hashCode = (hashCode * 59) + this.PaymentDetailId.GetHashCode();
                hashCode = (hashCode * 59) + this.ReturnId.GetHashCode();
                if (this.ArticleNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ArticleNumber.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Total.GetHashCode();
                hashCode = (hashCode * 59) + this.ReasonCode.GetHashCode();
                if (this.Reason != null)
                {
                    hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ToBalance.GetHashCode();
                hashCode = (hashCode * 59) + this.Vat.GetHashCode();
                hashCode = (hashCode * 59) + this.ItemId.GetHashCode();
                if (this.RefundType != null)
                {
                    hashCode = (hashCode * 59) + this.RefundType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
