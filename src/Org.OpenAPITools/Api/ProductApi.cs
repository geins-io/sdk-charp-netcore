/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a product availability monitor
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Envelope</returns>
        Envelope AddAvailabilityMonitor(ProductModelsMonitorSku model, int operationIndex = 0);

        /// <summary>
        /// Add a product availability monitor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Envelope</returns>
        ApiResponse<Envelope> AddAvailabilityMonitorWithHttpInfo(ProductModelsMonitorSku model, int operationIndex = 0);
        /// <summary>
        /// Adds a category relation to a product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="productCategory">The category to relate the product to.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Envelope</returns>
        Envelope AddCategoryToProduct(string productId, ProductModelsProductCategory productCategory, int? productIdType = default(int?), int operationIndex = 0);

        /// <summary>
        /// Adds a category relation to a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="productCategory">The category to relate the product to.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Envelope</returns>
        ApiResponse<Envelope> AddCategoryToProductWithHttpInfo(string productId, ProductModelsProductCategory productCategory, int? productIdType = default(int?), int operationIndex = 0);
        /// <summary>
        /// Adds an image relation to a product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="imageName">The name of the image to set to product.</param>
        /// <param name="isPrimaryImage">Specifies whether {imageName} should be set as the primary image of the product. (optional)</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Envelope</returns>
        Envelope AddImageToProduct(string productId, string imageName, bool? isPrimaryImage = default(bool?), int? productIdType = default(int?), int operationIndex = 0);

        /// <summary>
        /// Adds an image relation to a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="imageName">The name of the image to set to product.</param>
        /// <param name="isPrimaryImage">Specifies whether {imageName} should be set as the primary image of the product. (optional)</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Envelope</returns>
        ApiResponse<Envelope> AddImageToProductWithHttpInfo(string productId, string imageName, bool? isPrimaryImage = default(bool?), int? productIdType = default(int?), int operationIndex = 0);
        /// <summary>
        /// Add related products to a product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the main product to which the relations will be created</param>
        /// <param name="relatedProducts">The list of related products to link with the main product.</param>
        /// <param name="productIdType">The type of product id for {productId} and supplied in {relatedProducts}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductModelsRelatedProductEnvelope</returns>
        ProductModelsRelatedProductEnvelope AddRelatedProductsToProduct(string productId, List<ProductModelsWriteRelatedProduct> relatedProducts, int? productIdType = default(int?), int operationIndex = 0);

        /// <summary>
        /// Add related products to a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the main product to which the relations will be created</param>
        /// <param name="relatedProducts">The list of related products to link with the main product.</param>
        /// <param name="productIdType">The type of product id for {productId} and supplied in {relatedProducts}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductModelsRelatedProductEnvelope</returns>
        ApiResponse<ProductModelsRelatedProductEnvelope> AddRelatedProductsToProductWithHttpInfo(string productId, List<ProductModelsWriteRelatedProduct> relatedProducts, int? productIdType = default(int?), int operationIndex = 0);
        /// <summary>
        /// Updates product items in batch
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItems">The product items to update</param>
        /// <param name="productItemIdType">The type of product item id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Envelope</returns>
        Envelope BatchUpdateProductItems(List<ProductModelsWriteProductItem> productItems, int? productItemIdType = default(int?), int operationIndex = 0);

        /// <summary>
        /// Updates product items in batch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItems">The product items to update</param>
        /// <param name="productItemIdType">The type of product item id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Envelope</returns>
        ApiResponse<Envelope> BatchUpdateProductItemsWithHttpInfo(List<ProductModelsWriteProductItem> productItems, int? productItemIdType = default(int?), int operationIndex = 0);
        /// <summary>
        /// Update stock values for multiple product items
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItemStocks">List of product item ids with new stock values.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {productItemStocks}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductModelsStockEnvelope</returns>
        ProductModelsStockEnvelope BatchUpdateStockValues(List<ProductModelsWriteProductItemStock> productItemStocks, int? productItemIdType = default(int?), int operationIndex = 0);

        /// <summary>
        /// Update stock values for multiple product items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItemStocks">List of product item ids with new stock values.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {productItemStocks}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductModelsStockEnvelope</returns>
        ApiResponse<ProductModelsStockEnvelope> BatchUpdateStockValuesWithHttpInfo(List<ProductModelsWriteProductItemStock> productItemStocks, int? productItemIdType = default(int?), int operationIndex = 0);
        /// <summary>
        /// Create a new product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product">The product to create.</param>
        /// <param name="include">Comma separated list of child-collections to also include with the created product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeProductModelsReadProduct</returns>
        EnvelopeProductModelsReadProduct CreateProduct(ProductModelsWriteProduct product, string include = default(string), int operationIndex = 0);

        /// <summary>
        /// Create a new product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product">The product to create.</param>
        /// <param name="include">Comma separated list of child-collections to also include with the created product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeProductModelsReadProduct</returns>
        ApiResponse<EnvelopeProductModelsReadProduct> CreateProductWithHttpInfo(ProductModelsWriteProduct product, string include = default(string), int operationIndex = 0);
        /// <summary>
        /// Create a new product item
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to create an item on.</param>
        /// <param name="productItem">The product item to create.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeProductModelsReadProductItem</returns>
        EnvelopeProductModelsReadProductItem CreateProductItems(string productId, ProductModelsWriteProductItem productItem, int? productIdType = default(int?), int operationIndex = 0);

        /// <summary>
        /// Create a new product item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to create an item on.</param>
        /// <param name="productItem">The product item to create.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeProductModelsReadProductItem</returns>
        ApiResponse<EnvelopeProductModelsReadProductItem> CreateProductItemsWithHttpInfo(string productId, ProductModelsWriteProductItem productItem, int? productIdType = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get a specific product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to get.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="include">Comma separated list of child-collections to also include with the requested product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeProductModelsReadProduct</returns>
        EnvelopeProductModelsReadProduct GetProductById(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0);

        /// <summary>
        /// Get a specific product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to get.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="include">Comma separated list of child-collections to also include with the requested product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeProductModelsReadProduct</returns>
        ApiResponse<EnvelopeProductModelsReadProduct> GetProductByIdWithHttpInfo(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0);
        /// <summary>
        /// Get a specific product item
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The id of the product item to get.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {itemId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductProductItemEnvelope</returns>
        ProductProductItemEnvelope GetProductItemById(string itemId, int? productItemIdType = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get a specific product item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The id of the product item to get.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {itemId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductProductItemEnvelope</returns>
        ApiResponse<ProductProductItemEnvelope> GetProductItemByIdWithHttpInfo(string itemId, int? productItemIdType = default(int?), int operationIndex = 0);
        /// <summary>
        /// Add related products to a product using a fixed relation type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the main product to which the relations will be created</param>
        /// <param name="relationTypeId">The relation type id that will apply to all related products in {relatedProducts}</param>
        /// <param name="relatedProducts">The list of related products to link with the main product.</param>
        /// <param name="productIdType">The type of product id for {productId} and supplied in {relatedProducts}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductModelsRelatedProductEnvelope</returns>
        ProductModelsRelatedProductEnvelope LinkRelatedProductsByRelationId(string productId, int relationTypeId, List<ProductModelsWriteRelatedProduct> relatedProducts, int? productIdType = default(int?), int operationIndex = 0);

        /// <summary>
        /// Add related products to a product using a fixed relation type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the main product to which the relations will be created</param>
        /// <param name="relationTypeId">The relation type id that will apply to all related products in {relatedProducts}</param>
        /// <param name="relatedProducts">The list of related products to link with the main product.</param>
        /// <param name="productIdType">The type of product id for {productId} and supplied in {relatedProducts}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductModelsRelatedProductEnvelope</returns>
        ApiResponse<ProductModelsRelatedProductEnvelope> LinkRelatedProductsByRelationIdWithHttpInfo(string productId, int relationTypeId, List<ProductModelsWriteRelatedProduct> relatedProducts, int? productIdType = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get all product items with pagination
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeListProductModelsReadProductItem</returns>
        EnvelopeListProductModelsReadProductItem ListAllProductItemsPaged(int page, int operationIndex = 0);

        /// <summary>
        /// Get all product items with pagination
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeListProductModelsReadProductItem</returns>
        ApiResponse<EnvelopeListProductModelsReadProductItem> ListAllProductItemsPagedWithHttpInfo(int page, int operationIndex = 0);
        /// <summary>
        /// Gets a list of all feeds
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeListProductModelsReadFeed</returns>
        EnvelopeListProductModelsReadFeed ListFeeds(int operationIndex = 0);

        /// <summary>
        /// Gets a list of all feeds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeListProductModelsReadFeed</returns>
        ApiResponse<EnvelopeListProductModelsReadFeed> ListFeedsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get all product items
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ProductModelsReadProductItem&gt;</returns>
        List<ProductModelsReadProductItem> ListProductItems(int operationIndex = 0);

        /// <summary>
        /// Get all product items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ProductModelsReadProductItem&gt;</returns>
        ApiResponse<List<ProductModelsReadProductItem>> ListProductItemsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Gets a list of product relation types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeListProductModelsReadRelationType</returns>
        EnvelopeListProductModelsReadRelationType ListProductRelationTypes(int operationIndex = 0);

        /// <summary>
        /// Gets a list of product relation types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeListProductModelsReadRelationType</returns>
        ApiResponse<EnvelopeListProductModelsReadRelationType> ListProductRelationTypesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Query products
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The details of the query</param>
        /// <param name="include">Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeListProductModelsReadProduct</returns>
        EnvelopeListProductModelsReadProduct QueryProducts(ProductModelsProductQuery query, string include = default(string), int operationIndex = 0);

        /// <summary>
        /// Query products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The details of the query</param>
        /// <param name="include">Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeListProductModelsReadProduct</returns>
        ApiResponse<EnvelopeListProductModelsReadProduct> QueryProductsWithHttpInfo(ProductModelsProductQuery query, string include = default(string), int operationIndex = 0);
        /// <summary>
        /// Query products with pagination
        /// </summary>
        /// <remarks>
        /// The {Product.Models.ProductQuery.BatchId} property is mandatory when fetching a page other than the first page.  If no BatchId is provided for the first page, a new batch is created and the BatchId can be found in the {Envelope.PageResult} field.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to fetch. To start a new batched query it is mandatory to send in page&#x3D;1</param>
        /// <param name="query">The details of the query</param>
        /// <param name="include">Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeListProductModelsReadProduct</returns>
        EnvelopeListProductModelsReadProduct QueryProductsPaged(int page, ProductModelsProductQuery query, string include = default(string), int operationIndex = 0);

        /// <summary>
        /// Query products with pagination
        /// </summary>
        /// <remarks>
        /// The {Product.Models.ProductQuery.BatchId} property is mandatory when fetching a page other than the first page.  If no BatchId is provided for the first page, a new batch is created and the BatchId can be found in the {Envelope.PageResult} field.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to fetch. To start a new batched query it is mandatory to send in page&#x3D;1</param>
        /// <param name="query">The details of the query</param>
        /// <param name="include">Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeListProductModelsReadProduct</returns>
        ApiResponse<EnvelopeListProductModelsReadProduct> QueryProductsPagedWithHttpInfo(int page, ProductModelsProductQuery query, string include = default(string), int operationIndex = 0);
        /// <summary>
        /// Query stock
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItemIds">The details of the query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ProductModelsReadProductItemStock&gt;</returns>
        List<ProductModelsReadProductItemStock> QueryStock(List<int> productItemIds, int operationIndex = 0);

        /// <summary>
        /// Query stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItemIds">The details of the query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ProductModelsReadProductItemStock&gt;</returns>
        ApiResponse<List<ProductModelsReadProductItemStock>> QueryStockWithHttpInfo(List<int> productItemIds, int operationIndex = 0);
        /// <summary>
        /// Updates a product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="product">The product data to update.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="include">Comma separated list of child-collections to also include with the updated product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeProductModelsReadProduct</returns>
        EnvelopeProductModelsReadProduct UpdateProduct(string productId, ProductModelsWriteProduct product, int? productIdType = default(int?), string include = default(string), int operationIndex = 0);

        /// <summary>
        /// Updates a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="product">The product data to update.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="include">Comma separated list of child-collections to also include with the updated product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeProductModelsReadProduct</returns>
        ApiResponse<EnvelopeProductModelsReadProduct> UpdateProductWithHttpInfo(string productId, ProductModelsWriteProduct product, int? productIdType = default(int?), string include = default(string), int operationIndex = 0);
        /// <summary>
        /// Updates a product item
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The id of the product item to update.</param>
        /// <param name="productItem">The product item data to update.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {itemId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeProductModelsReadProductItem</returns>
        EnvelopeProductModelsReadProductItem UpdateProductItem(string itemId, ProductModelsWriteProductItem productItem, int? productItemIdType = default(int?), int operationIndex = 0);

        /// <summary>
        /// Updates a product item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The id of the product item to update.</param>
        /// <param name="productItem">The product item data to update.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {itemId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeProductModelsReadProductItem</returns>
        ApiResponse<EnvelopeProductModelsReadProductItem> UpdateProductItemWithHttpInfo(string itemId, ProductModelsWriteProductItem productItem, int? productItemIdType = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a product availability monitor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Envelope</returns>
        System.Threading.Tasks.Task<Envelope> AddAvailabilityMonitorAsync(ProductModelsMonitorSku model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a product availability monitor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Envelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<Envelope>> AddAvailabilityMonitorWithHttpInfoAsync(ProductModelsMonitorSku model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adds a category relation to a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="productCategory">The category to relate the product to.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Envelope</returns>
        System.Threading.Tasks.Task<Envelope> AddCategoryToProductAsync(string productId, ProductModelsProductCategory productCategory, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds a category relation to a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="productCategory">The category to relate the product to.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Envelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<Envelope>> AddCategoryToProductWithHttpInfoAsync(string productId, ProductModelsProductCategory productCategory, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adds an image relation to a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="imageName">The name of the image to set to product.</param>
        /// <param name="isPrimaryImage">Specifies whether {imageName} should be set as the primary image of the product. (optional)</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Envelope</returns>
        System.Threading.Tasks.Task<Envelope> AddImageToProductAsync(string productId, string imageName, bool? isPrimaryImage = default(bool?), int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds an image relation to a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="imageName">The name of the image to set to product.</param>
        /// <param name="isPrimaryImage">Specifies whether {imageName} should be set as the primary image of the product. (optional)</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Envelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<Envelope>> AddImageToProductWithHttpInfoAsync(string productId, string imageName, bool? isPrimaryImage = default(bool?), int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add related products to a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the main product to which the relations will be created</param>
        /// <param name="relatedProducts">The list of related products to link with the main product.</param>
        /// <param name="productIdType">The type of product id for {productId} and supplied in {relatedProducts}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductModelsRelatedProductEnvelope</returns>
        System.Threading.Tasks.Task<ProductModelsRelatedProductEnvelope> AddRelatedProductsToProductAsync(string productId, List<ProductModelsWriteRelatedProduct> relatedProducts, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add related products to a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the main product to which the relations will be created</param>
        /// <param name="relatedProducts">The list of related products to link with the main product.</param>
        /// <param name="productIdType">The type of product id for {productId} and supplied in {relatedProducts}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductModelsRelatedProductEnvelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductModelsRelatedProductEnvelope>> AddRelatedProductsToProductWithHttpInfoAsync(string productId, List<ProductModelsWriteRelatedProduct> relatedProducts, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates product items in batch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItems">The product items to update</param>
        /// <param name="productItemIdType">The type of product item id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Envelope</returns>
        System.Threading.Tasks.Task<Envelope> BatchUpdateProductItemsAsync(List<ProductModelsWriteProductItem> productItems, int? productItemIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates product items in batch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItems">The product items to update</param>
        /// <param name="productItemIdType">The type of product item id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Envelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<Envelope>> BatchUpdateProductItemsWithHttpInfoAsync(List<ProductModelsWriteProductItem> productItems, int? productItemIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update stock values for multiple product items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItemStocks">List of product item ids with new stock values.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {productItemStocks}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductModelsStockEnvelope</returns>
        System.Threading.Tasks.Task<ProductModelsStockEnvelope> BatchUpdateStockValuesAsync(List<ProductModelsWriteProductItemStock> productItemStocks, int? productItemIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update stock values for multiple product items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItemStocks">List of product item ids with new stock values.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {productItemStocks}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductModelsStockEnvelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductModelsStockEnvelope>> BatchUpdateStockValuesWithHttpInfoAsync(List<ProductModelsWriteProductItemStock> productItemStocks, int? productItemIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product">The product to create.</param>
        /// <param name="include">Comma separated list of child-collections to also include with the created product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeProductModelsReadProduct</returns>
        System.Threading.Tasks.Task<EnvelopeProductModelsReadProduct> CreateProductAsync(ProductModelsWriteProduct product, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product">The product to create.</param>
        /// <param name="include">Comma separated list of child-collections to also include with the created product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeProductModelsReadProduct)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeProductModelsReadProduct>> CreateProductWithHttpInfoAsync(ProductModelsWriteProduct product, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new product item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to create an item on.</param>
        /// <param name="productItem">The product item to create.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeProductModelsReadProductItem</returns>
        System.Threading.Tasks.Task<EnvelopeProductModelsReadProductItem> CreateProductItemsAsync(string productId, ProductModelsWriteProductItem productItem, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new product item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to create an item on.</param>
        /// <param name="productItem">The product item to create.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeProductModelsReadProductItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeProductModelsReadProductItem>> CreateProductItemsWithHttpInfoAsync(string productId, ProductModelsWriteProductItem productItem, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a specific product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to get.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="include">Comma separated list of child-collections to also include with the requested product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeProductModelsReadProduct</returns>
        System.Threading.Tasks.Task<EnvelopeProductModelsReadProduct> GetProductByIdAsync(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a specific product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to get.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="include">Comma separated list of child-collections to also include with the requested product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeProductModelsReadProduct)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeProductModelsReadProduct>> GetProductByIdWithHttpInfoAsync(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a specific product item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The id of the product item to get.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {itemId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductProductItemEnvelope</returns>
        System.Threading.Tasks.Task<ProductProductItemEnvelope> GetProductItemByIdAsync(string itemId, int? productItemIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a specific product item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The id of the product item to get.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {itemId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductProductItemEnvelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductProductItemEnvelope>> GetProductItemByIdWithHttpInfoAsync(string itemId, int? productItemIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add related products to a product using a fixed relation type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the main product to which the relations will be created</param>
        /// <param name="relationTypeId">The relation type id that will apply to all related products in {relatedProducts}</param>
        /// <param name="relatedProducts">The list of related products to link with the main product.</param>
        /// <param name="productIdType">The type of product id for {productId} and supplied in {relatedProducts}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductModelsRelatedProductEnvelope</returns>
        System.Threading.Tasks.Task<ProductModelsRelatedProductEnvelope> LinkRelatedProductsByRelationIdAsync(string productId, int relationTypeId, List<ProductModelsWriteRelatedProduct> relatedProducts, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add related products to a product using a fixed relation type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the main product to which the relations will be created</param>
        /// <param name="relationTypeId">The relation type id that will apply to all related products in {relatedProducts}</param>
        /// <param name="relatedProducts">The list of related products to link with the main product.</param>
        /// <param name="productIdType">The type of product id for {productId} and supplied in {relatedProducts}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductModelsRelatedProductEnvelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductModelsRelatedProductEnvelope>> LinkRelatedProductsByRelationIdWithHttpInfoAsync(string productId, int relationTypeId, List<ProductModelsWriteRelatedProduct> relatedProducts, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all product items with pagination
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeListProductModelsReadProductItem</returns>
        System.Threading.Tasks.Task<EnvelopeListProductModelsReadProductItem> ListAllProductItemsPagedAsync(int page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all product items with pagination
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeListProductModelsReadProductItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeListProductModelsReadProductItem>> ListAllProductItemsPagedWithHttpInfoAsync(int page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a list of all feeds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeListProductModelsReadFeed</returns>
        System.Threading.Tasks.Task<EnvelopeListProductModelsReadFeed> ListFeedsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a list of all feeds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeListProductModelsReadFeed)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeListProductModelsReadFeed>> ListFeedsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all product items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProductModelsReadProductItem&gt;</returns>
        System.Threading.Tasks.Task<List<ProductModelsReadProductItem>> ListProductItemsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all product items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductModelsReadProductItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductModelsReadProductItem>>> ListProductItemsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a list of product relation types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeListProductModelsReadRelationType</returns>
        System.Threading.Tasks.Task<EnvelopeListProductModelsReadRelationType> ListProductRelationTypesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a list of product relation types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeListProductModelsReadRelationType)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeListProductModelsReadRelationType>> ListProductRelationTypesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Query products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The details of the query</param>
        /// <param name="include">Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeListProductModelsReadProduct</returns>
        System.Threading.Tasks.Task<EnvelopeListProductModelsReadProduct> QueryProductsAsync(ProductModelsProductQuery query, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Query products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The details of the query</param>
        /// <param name="include">Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeListProductModelsReadProduct)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeListProductModelsReadProduct>> QueryProductsWithHttpInfoAsync(ProductModelsProductQuery query, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Query products with pagination
        /// </summary>
        /// <remarks>
        /// The {Product.Models.ProductQuery.BatchId} property is mandatory when fetching a page other than the first page.  If no BatchId is provided for the first page, a new batch is created and the BatchId can be found in the {Envelope.PageResult} field.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to fetch. To start a new batched query it is mandatory to send in page&#x3D;1</param>
        /// <param name="query">The details of the query</param>
        /// <param name="include">Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeListProductModelsReadProduct</returns>
        System.Threading.Tasks.Task<EnvelopeListProductModelsReadProduct> QueryProductsPagedAsync(int page, ProductModelsProductQuery query, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Query products with pagination
        /// </summary>
        /// <remarks>
        /// The {Product.Models.ProductQuery.BatchId} property is mandatory when fetching a page other than the first page.  If no BatchId is provided for the first page, a new batch is created and the BatchId can be found in the {Envelope.PageResult} field.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to fetch. To start a new batched query it is mandatory to send in page&#x3D;1</param>
        /// <param name="query">The details of the query</param>
        /// <param name="include">Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeListProductModelsReadProduct)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeListProductModelsReadProduct>> QueryProductsPagedWithHttpInfoAsync(int page, ProductModelsProductQuery query, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Query stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItemIds">The details of the query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProductModelsReadProductItemStock&gt;</returns>
        System.Threading.Tasks.Task<List<ProductModelsReadProductItemStock>> QueryStockAsync(List<int> productItemIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Query stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItemIds">The details of the query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductModelsReadProductItemStock&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductModelsReadProductItemStock>>> QueryStockWithHttpInfoAsync(List<int> productItemIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="product">The product data to update.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="include">Comma separated list of child-collections to also include with the updated product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeProductModelsReadProduct</returns>
        System.Threading.Tasks.Task<EnvelopeProductModelsReadProduct> UpdateProductAsync(string productId, ProductModelsWriteProduct product, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="product">The product data to update.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="include">Comma separated list of child-collections to also include with the updated product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeProductModelsReadProduct)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeProductModelsReadProduct>> UpdateProductWithHttpInfoAsync(string productId, ProductModelsWriteProduct product, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a product item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The id of the product item to update.</param>
        /// <param name="productItem">The product item data to update.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {itemId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeProductModelsReadProductItem</returns>
        System.Threading.Tasks.Task<EnvelopeProductModelsReadProductItem> UpdateProductItemAsync(string itemId, ProductModelsWriteProductItem productItem, int? productItemIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a product item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The id of the product item to update.</param>
        /// <param name="productItem">The product item data to update.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {itemId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeProductModelsReadProductItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeProductModelsReadProductItem>> UpdateProductItemWithHttpInfoAsync(string itemId, ProductModelsWriteProductItem productItem, int? productItemIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApi : IProductApiSync, IProductApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductApi : IProductApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProductApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a product availability monitor 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Envelope</returns>
        public Envelope AddAvailabilityMonitor(ProductModelsMonitorSku model, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Envelope> localVarResponse = AddAvailabilityMonitorWithHttpInfo(model);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a product availability monitor 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Envelope</returns>
        public Org.OpenAPITools.Client.ApiResponse<Envelope> AddAvailabilityMonitorWithHttpInfo(ProductModelsMonitorSku model, int operationIndex = 0)
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling ProductApi->AddAvailabilityMonitor");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = model;

            localVarRequestOptions.Operation = "ProductApi.AddAvailabilityMonitor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Envelope>("/API/Product/MonitorAvailability", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAvailabilityMonitor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a product availability monitor 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Envelope</returns>
        public async System.Threading.Tasks.Task<Envelope> AddAvailabilityMonitorAsync(ProductModelsMonitorSku model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Envelope> localVarResponse = await AddAvailabilityMonitorWithHttpInfoAsync(model, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a product availability monitor 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Envelope)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Envelope>> AddAvailabilityMonitorWithHttpInfoAsync(ProductModelsMonitorSku model, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling ProductApi->AddAvailabilityMonitor");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = model;

            localVarRequestOptions.Operation = "ProductApi.AddAvailabilityMonitor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Envelope>("/API/Product/MonitorAvailability", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAvailabilityMonitor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a category relation to a product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="productCategory">The category to relate the product to.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Envelope</returns>
        public Envelope AddCategoryToProduct(string productId, ProductModelsProductCategory productCategory, int? productIdType = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Envelope> localVarResponse = AddCategoryToProductWithHttpInfo(productId, productCategory, productIdType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a category relation to a product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="productCategory">The category to relate the product to.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Envelope</returns>
        public Org.OpenAPITools.Client.ApiResponse<Envelope> AddCategoryToProductWithHttpInfo(string productId, ProductModelsProductCategory productCategory, int? productIdType = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->AddCategoryToProduct");
            }

            // verify the required parameter 'productCategory' is set
            if (productCategory == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productCategory' when calling ProductApi->AddCategoryToProduct");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            localVarRequestOptions.Data = productCategory;

            localVarRequestOptions.Operation = "ProductApi.AddCategoryToProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Envelope>("/API/Product/{productId}/Category", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddCategoryToProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a category relation to a product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="productCategory">The category to relate the product to.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Envelope</returns>
        public async System.Threading.Tasks.Task<Envelope> AddCategoryToProductAsync(string productId, ProductModelsProductCategory productCategory, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Envelope> localVarResponse = await AddCategoryToProductWithHttpInfoAsync(productId, productCategory, productIdType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a category relation to a product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="productCategory">The category to relate the product to.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Envelope)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Envelope>> AddCategoryToProductWithHttpInfoAsync(string productId, ProductModelsProductCategory productCategory, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->AddCategoryToProduct");
            }

            // verify the required parameter 'productCategory' is set
            if (productCategory == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productCategory' when calling ProductApi->AddCategoryToProduct");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            localVarRequestOptions.Data = productCategory;

            localVarRequestOptions.Operation = "ProductApi.AddCategoryToProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Envelope>("/API/Product/{productId}/Category", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddCategoryToProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds an image relation to a product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="imageName">The name of the image to set to product.</param>
        /// <param name="isPrimaryImage">Specifies whether {imageName} should be set as the primary image of the product. (optional)</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Envelope</returns>
        public Envelope AddImageToProduct(string productId, string imageName, bool? isPrimaryImage = default(bool?), int? productIdType = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Envelope> localVarResponse = AddImageToProductWithHttpInfo(productId, imageName, isPrimaryImage, productIdType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an image relation to a product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="imageName">The name of the image to set to product.</param>
        /// <param name="isPrimaryImage">Specifies whether {imageName} should be set as the primary image of the product. (optional)</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Envelope</returns>
        public Org.OpenAPITools.Client.ApiResponse<Envelope> AddImageToProductWithHttpInfo(string productId, string imageName, bool? isPrimaryImage = default(bool?), int? productIdType = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->AddImageToProduct");
            }

            // verify the required parameter 'imageName' is set
            if (imageName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'imageName' when calling ProductApi->AddImageToProduct");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(imageName)); // path parameter
            if (isPrimaryImage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "isPrimaryImage", isPrimaryImage));
            }
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }

            localVarRequestOptions.Operation = "ProductApi.AddImageToProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Envelope>("/API/Product/{productId}/Image/{imageName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddImageToProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds an image relation to a product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="imageName">The name of the image to set to product.</param>
        /// <param name="isPrimaryImage">Specifies whether {imageName} should be set as the primary image of the product. (optional)</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Envelope</returns>
        public async System.Threading.Tasks.Task<Envelope> AddImageToProductAsync(string productId, string imageName, bool? isPrimaryImage = default(bool?), int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Envelope> localVarResponse = await AddImageToProductWithHttpInfoAsync(productId, imageName, isPrimaryImage, productIdType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an image relation to a product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="imageName">The name of the image to set to product.</param>
        /// <param name="isPrimaryImage">Specifies whether {imageName} should be set as the primary image of the product. (optional)</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Envelope)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Envelope>> AddImageToProductWithHttpInfoAsync(string productId, string imageName, bool? isPrimaryImage = default(bool?), int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->AddImageToProduct");
            }

            // verify the required parameter 'imageName' is set
            if (imageName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'imageName' when calling ProductApi->AddImageToProduct");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(imageName)); // path parameter
            if (isPrimaryImage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "isPrimaryImage", isPrimaryImage));
            }
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }

            localVarRequestOptions.Operation = "ProductApi.AddImageToProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Envelope>("/API/Product/{productId}/Image/{imageName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddImageToProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add related products to a product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the main product to which the relations will be created</param>
        /// <param name="relatedProducts">The list of related products to link with the main product.</param>
        /// <param name="productIdType">The type of product id for {productId} and supplied in {relatedProducts}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductModelsRelatedProductEnvelope</returns>
        public ProductModelsRelatedProductEnvelope AddRelatedProductsToProduct(string productId, List<ProductModelsWriteRelatedProduct> relatedProducts, int? productIdType = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductModelsRelatedProductEnvelope> localVarResponse = AddRelatedProductsToProductWithHttpInfo(productId, relatedProducts, productIdType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add related products to a product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the main product to which the relations will be created</param>
        /// <param name="relatedProducts">The list of related products to link with the main product.</param>
        /// <param name="productIdType">The type of product id for {productId} and supplied in {relatedProducts}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductModelsRelatedProductEnvelope</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductModelsRelatedProductEnvelope> AddRelatedProductsToProductWithHttpInfo(string productId, List<ProductModelsWriteRelatedProduct> relatedProducts, int? productIdType = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->AddRelatedProductsToProduct");
            }

            // verify the required parameter 'relatedProducts' is set
            if (relatedProducts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'relatedProducts' when calling ProductApi->AddRelatedProductsToProduct");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            localVarRequestOptions.Data = relatedProducts;

            localVarRequestOptions.Operation = "ProductApi.AddRelatedProductsToProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductModelsRelatedProductEnvelope>("/API/Product/{productId}/Related", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddRelatedProductsToProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add related products to a product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the main product to which the relations will be created</param>
        /// <param name="relatedProducts">The list of related products to link with the main product.</param>
        /// <param name="productIdType">The type of product id for {productId} and supplied in {relatedProducts}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductModelsRelatedProductEnvelope</returns>
        public async System.Threading.Tasks.Task<ProductModelsRelatedProductEnvelope> AddRelatedProductsToProductAsync(string productId, List<ProductModelsWriteRelatedProduct> relatedProducts, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductModelsRelatedProductEnvelope> localVarResponse = await AddRelatedProductsToProductWithHttpInfoAsync(productId, relatedProducts, productIdType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add related products to a product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the main product to which the relations will be created</param>
        /// <param name="relatedProducts">The list of related products to link with the main product.</param>
        /// <param name="productIdType">The type of product id for {productId} and supplied in {relatedProducts}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductModelsRelatedProductEnvelope)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductModelsRelatedProductEnvelope>> AddRelatedProductsToProductWithHttpInfoAsync(string productId, List<ProductModelsWriteRelatedProduct> relatedProducts, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->AddRelatedProductsToProduct");
            }

            // verify the required parameter 'relatedProducts' is set
            if (relatedProducts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'relatedProducts' when calling ProductApi->AddRelatedProductsToProduct");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            localVarRequestOptions.Data = relatedProducts;

            localVarRequestOptions.Operation = "ProductApi.AddRelatedProductsToProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductModelsRelatedProductEnvelope>("/API/Product/{productId}/Related", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddRelatedProductsToProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates product items in batch 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItems">The product items to update</param>
        /// <param name="productItemIdType">The type of product item id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Envelope</returns>
        public Envelope BatchUpdateProductItems(List<ProductModelsWriteProductItem> productItems, int? productItemIdType = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Envelope> localVarResponse = BatchUpdateProductItemsWithHttpInfo(productItems, productItemIdType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates product items in batch 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItems">The product items to update</param>
        /// <param name="productItemIdType">The type of product item id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Envelope</returns>
        public Org.OpenAPITools.Client.ApiResponse<Envelope> BatchUpdateProductItemsWithHttpInfo(List<ProductModelsWriteProductItem> productItems, int? productItemIdType = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'productItems' is set
            if (productItems == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productItems' when calling ProductApi->BatchUpdateProductItems");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (productItemIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productItemIdType", productItemIdType));
            }
            localVarRequestOptions.Data = productItems;

            localVarRequestOptions.Operation = "ProductApi.BatchUpdateProductItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Envelope>("/API/Product/Items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUpdateProductItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates product items in batch 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItems">The product items to update</param>
        /// <param name="productItemIdType">The type of product item id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Envelope</returns>
        public async System.Threading.Tasks.Task<Envelope> BatchUpdateProductItemsAsync(List<ProductModelsWriteProductItem> productItems, int? productItemIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Envelope> localVarResponse = await BatchUpdateProductItemsWithHttpInfoAsync(productItems, productItemIdType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates product items in batch 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItems">The product items to update</param>
        /// <param name="productItemIdType">The type of product item id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Envelope)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Envelope>> BatchUpdateProductItemsWithHttpInfoAsync(List<ProductModelsWriteProductItem> productItems, int? productItemIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productItems' is set
            if (productItems == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productItems' when calling ProductApi->BatchUpdateProductItems");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (productItemIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productItemIdType", productItemIdType));
            }
            localVarRequestOptions.Data = productItems;

            localVarRequestOptions.Operation = "ProductApi.BatchUpdateProductItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Envelope>("/API/Product/Items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUpdateProductItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update stock values for multiple product items 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItemStocks">List of product item ids with new stock values.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {productItemStocks}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductModelsStockEnvelope</returns>
        public ProductModelsStockEnvelope BatchUpdateStockValues(List<ProductModelsWriteProductItemStock> productItemStocks, int? productItemIdType = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductModelsStockEnvelope> localVarResponse = BatchUpdateStockValuesWithHttpInfo(productItemStocks, productItemIdType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update stock values for multiple product items 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItemStocks">List of product item ids with new stock values.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {productItemStocks}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductModelsStockEnvelope</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductModelsStockEnvelope> BatchUpdateStockValuesWithHttpInfo(List<ProductModelsWriteProductItemStock> productItemStocks, int? productItemIdType = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'productItemStocks' is set
            if (productItemStocks == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productItemStocks' when calling ProductApi->BatchUpdateStockValues");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (productItemIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productItemIdType", productItemIdType));
            }
            localVarRequestOptions.Data = productItemStocks;

            localVarRequestOptions.Operation = "ProductApi.BatchUpdateStockValues";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductModelsStockEnvelope>("/API/Product/Stock", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUpdateStockValues", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update stock values for multiple product items 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItemStocks">List of product item ids with new stock values.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {productItemStocks}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductModelsStockEnvelope</returns>
        public async System.Threading.Tasks.Task<ProductModelsStockEnvelope> BatchUpdateStockValuesAsync(List<ProductModelsWriteProductItemStock> productItemStocks, int? productItemIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductModelsStockEnvelope> localVarResponse = await BatchUpdateStockValuesWithHttpInfoAsync(productItemStocks, productItemIdType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update stock values for multiple product items 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItemStocks">List of product item ids with new stock values.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {productItemStocks}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductModelsStockEnvelope)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductModelsStockEnvelope>> BatchUpdateStockValuesWithHttpInfoAsync(List<ProductModelsWriteProductItemStock> productItemStocks, int? productItemIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productItemStocks' is set
            if (productItemStocks == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productItemStocks' when calling ProductApi->BatchUpdateStockValues");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (productItemIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productItemIdType", productItemIdType));
            }
            localVarRequestOptions.Data = productItemStocks;

            localVarRequestOptions.Operation = "ProductApi.BatchUpdateStockValues";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductModelsStockEnvelope>("/API/Product/Stock", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUpdateStockValues", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product">The product to create.</param>
        /// <param name="include">Comma separated list of child-collections to also include with the created product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeProductModelsReadProduct</returns>
        public EnvelopeProductModelsReadProduct CreateProduct(ProductModelsWriteProduct product, string include = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeProductModelsReadProduct> localVarResponse = CreateProductWithHttpInfo(product, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product">The product to create.</param>
        /// <param name="include">Comma separated list of child-collections to also include with the created product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeProductModelsReadProduct</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeProductModelsReadProduct> CreateProductWithHttpInfo(ProductModelsWriteProduct product, string include = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'product' is set
            if (product == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'product' when calling ProductApi->CreateProduct");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            localVarRequestOptions.Data = product;

            localVarRequestOptions.Operation = "ProductApi.CreateProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EnvelopeProductModelsReadProduct>("/API/Product", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product">The product to create.</param>
        /// <param name="include">Comma separated list of child-collections to also include with the created product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeProductModelsReadProduct</returns>
        public async System.Threading.Tasks.Task<EnvelopeProductModelsReadProduct> CreateProductAsync(ProductModelsWriteProduct product, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeProductModelsReadProduct> localVarResponse = await CreateProductWithHttpInfoAsync(product, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product">The product to create.</param>
        /// <param name="include">Comma separated list of child-collections to also include with the created product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeProductModelsReadProduct)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeProductModelsReadProduct>> CreateProductWithHttpInfoAsync(ProductModelsWriteProduct product, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'product' is set
            if (product == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'product' when calling ProductApi->CreateProduct");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            localVarRequestOptions.Data = product;

            localVarRequestOptions.Operation = "ProductApi.CreateProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EnvelopeProductModelsReadProduct>("/API/Product", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new product item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to create an item on.</param>
        /// <param name="productItem">The product item to create.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeProductModelsReadProductItem</returns>
        public EnvelopeProductModelsReadProductItem CreateProductItems(string productId, ProductModelsWriteProductItem productItem, int? productIdType = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeProductModelsReadProductItem> localVarResponse = CreateProductItemsWithHttpInfo(productId, productItem, productIdType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new product item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to create an item on.</param>
        /// <param name="productItem">The product item to create.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeProductModelsReadProductItem</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeProductModelsReadProductItem> CreateProductItemsWithHttpInfo(string productId, ProductModelsWriteProductItem productItem, int? productIdType = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->CreateProductItems");
            }

            // verify the required parameter 'productItem' is set
            if (productItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productItem' when calling ProductApi->CreateProductItems");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            localVarRequestOptions.Data = productItem;

            localVarRequestOptions.Operation = "ProductApi.CreateProductItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EnvelopeProductModelsReadProductItem>("/API/Product/{productId}/Item", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new product item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to create an item on.</param>
        /// <param name="productItem">The product item to create.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeProductModelsReadProductItem</returns>
        public async System.Threading.Tasks.Task<EnvelopeProductModelsReadProductItem> CreateProductItemsAsync(string productId, ProductModelsWriteProductItem productItem, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeProductModelsReadProductItem> localVarResponse = await CreateProductItemsWithHttpInfoAsync(productId, productItem, productIdType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new product item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to create an item on.</param>
        /// <param name="productItem">The product item to create.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeProductModelsReadProductItem)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeProductModelsReadProductItem>> CreateProductItemsWithHttpInfoAsync(string productId, ProductModelsWriteProductItem productItem, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->CreateProductItems");
            }

            // verify the required parameter 'productItem' is set
            if (productItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productItem' when calling ProductApi->CreateProductItems");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            localVarRequestOptions.Data = productItem;

            localVarRequestOptions.Operation = "ProductApi.CreateProductItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EnvelopeProductModelsReadProductItem>("/API/Product/{productId}/Item", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to get.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="include">Comma separated list of child-collections to also include with the requested product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeProductModelsReadProduct</returns>
        public EnvelopeProductModelsReadProduct GetProductById(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeProductModelsReadProduct> localVarResponse = GetProductByIdWithHttpInfo(productId, productIdType, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to get.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="include">Comma separated list of child-collections to also include with the requested product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeProductModelsReadProduct</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeProductModelsReadProduct> GetProductByIdWithHttpInfo(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->GetProductById");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "ProductApi.GetProductById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EnvelopeProductModelsReadProduct>("/API/Product/{productId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to get.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="include">Comma separated list of child-collections to also include with the requested product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeProductModelsReadProduct</returns>
        public async System.Threading.Tasks.Task<EnvelopeProductModelsReadProduct> GetProductByIdAsync(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeProductModelsReadProduct> localVarResponse = await GetProductByIdWithHttpInfoAsync(productId, productIdType, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to get.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="include">Comma separated list of child-collections to also include with the requested product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeProductModelsReadProduct)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeProductModelsReadProduct>> GetProductByIdWithHttpInfoAsync(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->GetProductById");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "ProductApi.GetProductById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EnvelopeProductModelsReadProduct>("/API/Product/{productId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific product item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The id of the product item to get.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {itemId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductProductItemEnvelope</returns>
        public ProductProductItemEnvelope GetProductItemById(string itemId, int? productItemIdType = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductProductItemEnvelope> localVarResponse = GetProductItemByIdWithHttpInfo(itemId, productItemIdType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific product item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The id of the product item to get.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {itemId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductProductItemEnvelope</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductProductItemEnvelope> GetProductItemByIdWithHttpInfo(string itemId, int? productItemIdType = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemId' when calling ProductApi->GetProductItemById");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("itemId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemId)); // path parameter
            if (productItemIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productItemIdType", productItemIdType));
            }

            localVarRequestOptions.Operation = "ProductApi.GetProductItemById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductProductItemEnvelope>("/API/Product/Item/{itemId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductItemById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific product item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The id of the product item to get.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {itemId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductProductItemEnvelope</returns>
        public async System.Threading.Tasks.Task<ProductProductItemEnvelope> GetProductItemByIdAsync(string itemId, int? productItemIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductProductItemEnvelope> localVarResponse = await GetProductItemByIdWithHttpInfoAsync(itemId, productItemIdType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific product item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The id of the product item to get.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {itemId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductProductItemEnvelope)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductProductItemEnvelope>> GetProductItemByIdWithHttpInfoAsync(string itemId, int? productItemIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemId' when calling ProductApi->GetProductItemById");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("itemId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemId)); // path parameter
            if (productItemIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productItemIdType", productItemIdType));
            }

            localVarRequestOptions.Operation = "ProductApi.GetProductItemById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductProductItemEnvelope>("/API/Product/Item/{itemId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductItemById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add related products to a product using a fixed relation type 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the main product to which the relations will be created</param>
        /// <param name="relationTypeId">The relation type id that will apply to all related products in {relatedProducts}</param>
        /// <param name="relatedProducts">The list of related products to link with the main product.</param>
        /// <param name="productIdType">The type of product id for {productId} and supplied in {relatedProducts}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductModelsRelatedProductEnvelope</returns>
        public ProductModelsRelatedProductEnvelope LinkRelatedProductsByRelationId(string productId, int relationTypeId, List<ProductModelsWriteRelatedProduct> relatedProducts, int? productIdType = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductModelsRelatedProductEnvelope> localVarResponse = LinkRelatedProductsByRelationIdWithHttpInfo(productId, relationTypeId, relatedProducts, productIdType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add related products to a product using a fixed relation type 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the main product to which the relations will be created</param>
        /// <param name="relationTypeId">The relation type id that will apply to all related products in {relatedProducts}</param>
        /// <param name="relatedProducts">The list of related products to link with the main product.</param>
        /// <param name="productIdType">The type of product id for {productId} and supplied in {relatedProducts}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductModelsRelatedProductEnvelope</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductModelsRelatedProductEnvelope> LinkRelatedProductsByRelationIdWithHttpInfo(string productId, int relationTypeId, List<ProductModelsWriteRelatedProduct> relatedProducts, int? productIdType = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->LinkRelatedProductsByRelationId");
            }

            // verify the required parameter 'relatedProducts' is set
            if (relatedProducts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'relatedProducts' when calling ProductApi->LinkRelatedProductsByRelationId");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("relationTypeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(relationTypeId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            localVarRequestOptions.Data = relatedProducts;

            localVarRequestOptions.Operation = "ProductApi.LinkRelatedProductsByRelationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductModelsRelatedProductEnvelope>("/API/Product/{productId}/Related/{relationTypeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkRelatedProductsByRelationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add related products to a product using a fixed relation type 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the main product to which the relations will be created</param>
        /// <param name="relationTypeId">The relation type id that will apply to all related products in {relatedProducts}</param>
        /// <param name="relatedProducts">The list of related products to link with the main product.</param>
        /// <param name="productIdType">The type of product id for {productId} and supplied in {relatedProducts}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductModelsRelatedProductEnvelope</returns>
        public async System.Threading.Tasks.Task<ProductModelsRelatedProductEnvelope> LinkRelatedProductsByRelationIdAsync(string productId, int relationTypeId, List<ProductModelsWriteRelatedProduct> relatedProducts, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductModelsRelatedProductEnvelope> localVarResponse = await LinkRelatedProductsByRelationIdWithHttpInfoAsync(productId, relationTypeId, relatedProducts, productIdType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add related products to a product using a fixed relation type 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the main product to which the relations will be created</param>
        /// <param name="relationTypeId">The relation type id that will apply to all related products in {relatedProducts}</param>
        /// <param name="relatedProducts">The list of related products to link with the main product.</param>
        /// <param name="productIdType">The type of product id for {productId} and supplied in {relatedProducts}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductModelsRelatedProductEnvelope)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductModelsRelatedProductEnvelope>> LinkRelatedProductsByRelationIdWithHttpInfoAsync(string productId, int relationTypeId, List<ProductModelsWriteRelatedProduct> relatedProducts, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->LinkRelatedProductsByRelationId");
            }

            // verify the required parameter 'relatedProducts' is set
            if (relatedProducts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'relatedProducts' when calling ProductApi->LinkRelatedProductsByRelationId");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("relationTypeId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(relationTypeId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            localVarRequestOptions.Data = relatedProducts;

            localVarRequestOptions.Operation = "ProductApi.LinkRelatedProductsByRelationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductModelsRelatedProductEnvelope>("/API/Product/{productId}/Related/{relationTypeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkRelatedProductsByRelationId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all product items with pagination 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeListProductModelsReadProductItem</returns>
        public EnvelopeListProductModelsReadProductItem ListAllProductItemsPaged(int page, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeListProductModelsReadProductItem> localVarResponse = ListAllProductItemsPagedWithHttpInfo(page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all product items with pagination 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeListProductModelsReadProductItem</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeListProductModelsReadProductItem> ListAllProductItemsPagedWithHttpInfo(int page, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter

            localVarRequestOptions.Operation = "ProductApi.ListAllProductItemsPaged";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EnvelopeListProductModelsReadProductItem>("/API/Product/Items/{page}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllProductItemsPaged", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all product items with pagination 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeListProductModelsReadProductItem</returns>
        public async System.Threading.Tasks.Task<EnvelopeListProductModelsReadProductItem> ListAllProductItemsPagedAsync(int page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeListProductModelsReadProductItem> localVarResponse = await ListAllProductItemsPagedWithHttpInfoAsync(page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all product items with pagination 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeListProductModelsReadProductItem)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeListProductModelsReadProductItem>> ListAllProductItemsPagedWithHttpInfoAsync(int page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter

            localVarRequestOptions.Operation = "ProductApi.ListAllProductItemsPaged";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EnvelopeListProductModelsReadProductItem>("/API/Product/Items/{page}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllProductItemsPaged", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of all feeds 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeListProductModelsReadFeed</returns>
        public EnvelopeListProductModelsReadFeed ListFeeds(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeListProductModelsReadFeed> localVarResponse = ListFeedsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of all feeds 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeListProductModelsReadFeed</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeListProductModelsReadFeed> ListFeedsWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ProductApi.ListFeeds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EnvelopeListProductModelsReadFeed>("/API/Product/Feeds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFeeds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of all feeds 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeListProductModelsReadFeed</returns>
        public async System.Threading.Tasks.Task<EnvelopeListProductModelsReadFeed> ListFeedsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeListProductModelsReadFeed> localVarResponse = await ListFeedsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of all feeds 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeListProductModelsReadFeed)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeListProductModelsReadFeed>> ListFeedsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ProductApi.ListFeeds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EnvelopeListProductModelsReadFeed>("/API/Product/Feeds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFeeds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all product items 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ProductModelsReadProductItem&gt;</returns>
        public List<ProductModelsReadProductItem> ListProductItems(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<ProductModelsReadProductItem>> localVarResponse = ListProductItemsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all product items 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ProductModelsReadProductItem&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<ProductModelsReadProductItem>> ListProductItemsWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ProductApi.ListProductItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ProductModelsReadProductItem>>("/API/Product/Items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProductItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all product items 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProductModelsReadProductItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductModelsReadProductItem>> ListProductItemsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<ProductModelsReadProductItem>> localVarResponse = await ListProductItemsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all product items 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductModelsReadProductItem&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<ProductModelsReadProductItem>>> ListProductItemsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ProductApi.ListProductItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ProductModelsReadProductItem>>("/API/Product/Items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProductItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of product relation types 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeListProductModelsReadRelationType</returns>
        public EnvelopeListProductModelsReadRelationType ListProductRelationTypes(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeListProductModelsReadRelationType> localVarResponse = ListProductRelationTypesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of product relation types 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeListProductModelsReadRelationType</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeListProductModelsReadRelationType> ListProductRelationTypesWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ProductApi.ListProductRelationTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EnvelopeListProductModelsReadRelationType>("/API/Product/RelationTypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProductRelationTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of product relation types 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeListProductModelsReadRelationType</returns>
        public async System.Threading.Tasks.Task<EnvelopeListProductModelsReadRelationType> ListProductRelationTypesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeListProductModelsReadRelationType> localVarResponse = await ListProductRelationTypesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of product relation types 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeListProductModelsReadRelationType)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeListProductModelsReadRelationType>> ListProductRelationTypesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ProductApi.ListProductRelationTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EnvelopeListProductModelsReadRelationType>("/API/Product/RelationTypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProductRelationTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query products 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The details of the query</param>
        /// <param name="include">Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeListProductModelsReadProduct</returns>
        public EnvelopeListProductModelsReadProduct QueryProducts(ProductModelsProductQuery query, string include = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeListProductModelsReadProduct> localVarResponse = QueryProductsWithHttpInfo(query, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query products 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The details of the query</param>
        /// <param name="include">Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeListProductModelsReadProduct</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeListProductModelsReadProduct> QueryProductsWithHttpInfo(ProductModelsProductQuery query, string include = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'query' when calling ProductApi->QueryProducts");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            localVarRequestOptions.Data = query;

            localVarRequestOptions.Operation = "ProductApi.QueryProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EnvelopeListProductModelsReadProduct>("/API/Product/Query", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query products 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The details of the query</param>
        /// <param name="include">Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeListProductModelsReadProduct</returns>
        public async System.Threading.Tasks.Task<EnvelopeListProductModelsReadProduct> QueryProductsAsync(ProductModelsProductQuery query, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeListProductModelsReadProduct> localVarResponse = await QueryProductsWithHttpInfoAsync(query, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query products 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The details of the query</param>
        /// <param name="include">Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeListProductModelsReadProduct)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeListProductModelsReadProduct>> QueryProductsWithHttpInfoAsync(ProductModelsProductQuery query, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'query' when calling ProductApi->QueryProducts");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            localVarRequestOptions.Data = query;

            localVarRequestOptions.Operation = "ProductApi.QueryProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EnvelopeListProductModelsReadProduct>("/API/Product/Query", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query products with pagination The {Product.Models.ProductQuery.BatchId} property is mandatory when fetching a page other than the first page.  If no BatchId is provided for the first page, a new batch is created and the BatchId can be found in the {Envelope.PageResult} field.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to fetch. To start a new batched query it is mandatory to send in page&#x3D;1</param>
        /// <param name="query">The details of the query</param>
        /// <param name="include">Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeListProductModelsReadProduct</returns>
        public EnvelopeListProductModelsReadProduct QueryProductsPaged(int page, ProductModelsProductQuery query, string include = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeListProductModelsReadProduct> localVarResponse = QueryProductsPagedWithHttpInfo(page, query, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query products with pagination The {Product.Models.ProductQuery.BatchId} property is mandatory when fetching a page other than the first page.  If no BatchId is provided for the first page, a new batch is created and the BatchId can be found in the {Envelope.PageResult} field.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to fetch. To start a new batched query it is mandatory to send in page&#x3D;1</param>
        /// <param name="query">The details of the query</param>
        /// <param name="include">Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeListProductModelsReadProduct</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeListProductModelsReadProduct> QueryProductsPagedWithHttpInfo(int page, ProductModelsProductQuery query, string include = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'query' when calling ProductApi->QueryProductsPaged");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            localVarRequestOptions.Data = query;

            localVarRequestOptions.Operation = "ProductApi.QueryProductsPaged";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EnvelopeListProductModelsReadProduct>("/API/Product/Query/{page}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryProductsPaged", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query products with pagination The {Product.Models.ProductQuery.BatchId} property is mandatory when fetching a page other than the first page.  If no BatchId is provided for the first page, a new batch is created and the BatchId can be found in the {Envelope.PageResult} field.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to fetch. To start a new batched query it is mandatory to send in page&#x3D;1</param>
        /// <param name="query">The details of the query</param>
        /// <param name="include">Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeListProductModelsReadProduct</returns>
        public async System.Threading.Tasks.Task<EnvelopeListProductModelsReadProduct> QueryProductsPagedAsync(int page, ProductModelsProductQuery query, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeListProductModelsReadProduct> localVarResponse = await QueryProductsPagedWithHttpInfoAsync(page, query, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query products with pagination The {Product.Models.ProductQuery.BatchId} property is mandatory when fetching a page other than the first page.  If no BatchId is provided for the first page, a new batch is created and the BatchId can be found in the {Envelope.PageResult} field.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to fetch. To start a new batched query it is mandatory to send in page&#x3D;1</param>
        /// <param name="query">The details of the query</param>
        /// <param name="include">Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeListProductModelsReadProduct)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeListProductModelsReadProduct>> QueryProductsPagedWithHttpInfoAsync(int page, ProductModelsProductQuery query, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'query' when calling ProductApi->QueryProductsPaged");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            localVarRequestOptions.Data = query;

            localVarRequestOptions.Operation = "ProductApi.QueryProductsPaged";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EnvelopeListProductModelsReadProduct>("/API/Product/Query/{page}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryProductsPaged", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query stock 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItemIds">The details of the query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ProductModelsReadProductItemStock&gt;</returns>
        public List<ProductModelsReadProductItemStock> QueryStock(List<int> productItemIds, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<ProductModelsReadProductItemStock>> localVarResponse = QueryStockWithHttpInfo(productItemIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query stock 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItemIds">The details of the query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ProductModelsReadProductItemStock&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<ProductModelsReadProductItemStock>> QueryStockWithHttpInfo(List<int> productItemIds, int operationIndex = 0)
        {
            // verify the required parameter 'productItemIds' is set
            if (productItemIds == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productItemIds' when calling ProductApi->QueryStock");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productItemIds;

            localVarRequestOptions.Operation = "ProductApi.QueryStock";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ProductModelsReadProductItemStock>>("/API/Product/Stock/Query", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryStock", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query stock 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItemIds">The details of the query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProductModelsReadProductItemStock&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductModelsReadProductItemStock>> QueryStockAsync(List<int> productItemIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<ProductModelsReadProductItemStock>> localVarResponse = await QueryStockWithHttpInfoAsync(productItemIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query stock 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productItemIds">The details of the query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductModelsReadProductItemStock&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<ProductModelsReadProductItemStock>>> QueryStockWithHttpInfoAsync(List<int> productItemIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productItemIds' is set
            if (productItemIds == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productItemIds' when calling ProductApi->QueryStock");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productItemIds;

            localVarRequestOptions.Operation = "ProductApi.QueryStock";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ProductModelsReadProductItemStock>>("/API/Product/Stock/Query", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryStock", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="product">The product data to update.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="include">Comma separated list of child-collections to also include with the updated product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeProductModelsReadProduct</returns>
        public EnvelopeProductModelsReadProduct UpdateProduct(string productId, ProductModelsWriteProduct product, int? productIdType = default(int?), string include = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeProductModelsReadProduct> localVarResponse = UpdateProductWithHttpInfo(productId, product, productIdType, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="product">The product data to update.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="include">Comma separated list of child-collections to also include with the updated product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeProductModelsReadProduct</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeProductModelsReadProduct> UpdateProductWithHttpInfo(string productId, ProductModelsWriteProduct product, int? productIdType = default(int?), string include = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->UpdateProduct");
            }

            // verify the required parameter 'product' is set
            if (product == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'product' when calling ProductApi->UpdateProduct");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            localVarRequestOptions.Data = product;

            localVarRequestOptions.Operation = "ProductApi.UpdateProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EnvelopeProductModelsReadProduct>("/API/Product/{productId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="product">The product data to update.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="include">Comma separated list of child-collections to also include with the updated product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeProductModelsReadProduct</returns>
        public async System.Threading.Tasks.Task<EnvelopeProductModelsReadProduct> UpdateProductAsync(string productId, ProductModelsWriteProduct product, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeProductModelsReadProduct> localVarResponse = await UpdateProductWithHttpInfoAsync(productId, product, productIdType, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a product 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to update.</param>
        /// <param name="product">The product data to update.</param>
        /// <param name="productIdType">The type of product id supplied in {productId}. (optional)</param>
        /// <param name="include">Comma separated list of child-collections to also include with the updated product. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeProductModelsReadProduct)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeProductModelsReadProduct>> UpdateProductWithHttpInfoAsync(string productId, ProductModelsWriteProduct product, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->UpdateProduct");
            }

            // verify the required parameter 'product' is set
            if (product == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'product' when calling ProductApi->UpdateProduct");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            localVarRequestOptions.Data = product;

            localVarRequestOptions.Operation = "ProductApi.UpdateProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EnvelopeProductModelsReadProduct>("/API/Product/{productId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a product item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The id of the product item to update.</param>
        /// <param name="productItem">The product item data to update.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {itemId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeProductModelsReadProductItem</returns>
        public EnvelopeProductModelsReadProductItem UpdateProductItem(string itemId, ProductModelsWriteProductItem productItem, int? productItemIdType = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeProductModelsReadProductItem> localVarResponse = UpdateProductItemWithHttpInfo(itemId, productItem, productItemIdType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a product item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The id of the product item to update.</param>
        /// <param name="productItem">The product item data to update.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {itemId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeProductModelsReadProductItem</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeProductModelsReadProductItem> UpdateProductItemWithHttpInfo(string itemId, ProductModelsWriteProductItem productItem, int? productItemIdType = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemId' when calling ProductApi->UpdateProductItem");
            }

            // verify the required parameter 'productItem' is set
            if (productItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productItem' when calling ProductApi->UpdateProductItem");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("itemId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemId)); // path parameter
            if (productItemIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productItemIdType", productItemIdType));
            }
            localVarRequestOptions.Data = productItem;

            localVarRequestOptions.Operation = "ProductApi.UpdateProductItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EnvelopeProductModelsReadProductItem>("/API/Product/Item/{itemId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a product item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The id of the product item to update.</param>
        /// <param name="productItem">The product item data to update.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {itemId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeProductModelsReadProductItem</returns>
        public async System.Threading.Tasks.Task<EnvelopeProductModelsReadProductItem> UpdateProductItemAsync(string itemId, ProductModelsWriteProductItem productItem, int? productItemIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeProductModelsReadProductItem> localVarResponse = await UpdateProductItemWithHttpInfoAsync(itemId, productItem, productItemIdType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a product item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The id of the product item to update.</param>
        /// <param name="productItem">The product item data to update.</param>
        /// <param name="productItemIdType">The type of product item id supplied in {itemId}. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeProductModelsReadProductItem)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeProductModelsReadProductItem>> UpdateProductItemWithHttpInfoAsync(string itemId, ProductModelsWriteProductItem productItem, int? productItemIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemId' when calling ProductApi->UpdateProductItem");
            }

            // verify the required parameter 'productItem' is set
            if (productItem == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productItem' when calling ProductApi->UpdateProductItem");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("itemId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemId)); // path parameter
            if (productItemIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productItemIdType", productItemIdType));
            }
            localVarRequestOptions.Data = productItem;

            localVarRequestOptions.Operation = "ProductApi.UpdateProductItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EnvelopeProductModelsReadProductItem>("/API/Product/Item/{itemId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
