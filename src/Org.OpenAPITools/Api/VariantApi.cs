/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVariantApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a product to an existing group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to which a product should be added</param>
        /// <param name="productId">The ID of the product to be added to the target group.</param>
        /// <param name="variant">The variant details.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeVariantModelsReadVariantGroup</returns>
        EnvelopeVariantModelsReadVariantGroup AddProductToVariantGroup(int groupId, string productId, List<VariantModelsWriteVariant> variant, int? productIdType = default(int?), string include = default(string), int operationIndex = 0);

        /// <summary>
        /// Adds a product to an existing group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to which a product should be added</param>
        /// <param name="productId">The ID of the product to be added to the target group.</param>
        /// <param name="variant">The variant details.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeVariantModelsReadVariantGroup</returns>
        ApiResponse<EnvelopeVariantModelsReadVariantGroup> AddProductToVariantGroupWithHttpInfo(int groupId, string productId, List<VariantModelsWriteVariant> variant, int? productIdType = default(int?), string include = default(string), int operationIndex = 0);
        /// <summary>
        /// Adds a product to an existing group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId1">The ID of a product belonging to the target group.</param>
        /// <param name="productId2">The ID of the product to be added to the target group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeVariantModelsReadVariantGroup</returns>
        EnvelopeVariantModelsReadVariantGroup AddProductToVariantGroupByProductId(string productId1, string productId2, int? productIdType = default(int?), string include = default(string), int operationIndex = 0);

        /// <summary>
        /// Adds a product to an existing group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId1">The ID of a product belonging to the target group.</param>
        /// <param name="productId2">The ID of the product to be added to the target group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeVariantModelsReadVariantGroup</returns>
        ApiResponse<EnvelopeVariantModelsReadVariantGroup> AddProductToVariantGroupByProductIdWithHttpInfo(string productId1, string productId2, int? productIdType = default(int?), string include = default(string), int operationIndex = 0);
        /// <summary>
        /// Create a new variant group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variantGroup">The settings for the new group.</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeVariantModelsReadVariantGroup</returns>
        EnvelopeVariantModelsReadVariantGroup CreateVariantGroup(VariantModelsWriteVariantGroup variantGroup, string include = default(string), int operationIndex = 0);

        /// <summary>
        /// Create a new variant group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variantGroup">The settings for the new group.</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeVariantModelsReadVariantGroup</returns>
        ApiResponse<EnvelopeVariantModelsReadVariantGroup> CreateVariantGroupWithHttpInfo(VariantModelsWriteVariantGroup variantGroup, string include = default(string), int operationIndex = 0);
        /// <summary>
        /// Create a new group for the provided product id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product, for which to create a group.</param>
        /// <param name="variantGroup">The settings for the new group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeVariantModelsReadVariantGroup</returns>
        EnvelopeVariantModelsReadVariantGroup CreateVariantGroupWithProduct(string productId, VariantModelsWriteVariantGroup variantGroup, int? productIdType = default(int?), string include = default(string), int operationIndex = 0);

        /// <summary>
        /// Create a new group for the provided product id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product, for which to create a group.</param>
        /// <param name="variantGroup">The settings for the new group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeVariantModelsReadVariantGroup</returns>
        ApiResponse<EnvelopeVariantModelsReadVariantGroup> CreateVariantGroupWithProductWithHttpInfo(string productId, VariantModelsWriteVariantGroup variantGroup, int? productIdType = default(int?), string include = default(string), int operationIndex = 0);
        /// <summary>
        /// Delete an entire variant group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeVariantModelsReadVariantGroup</returns>
        EnvelopeVariantModelsReadVariantGroup DeleteVariantGroup(int groupId, int operationIndex = 0);

        /// <summary>
        /// Delete an entire variant group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeVariantModelsReadVariantGroup</returns>
        ApiResponse<EnvelopeVariantModelsReadVariantGroup> DeleteVariantGroupWithHttpInfo(int groupId, int operationIndex = 0);
        /// <summary>
        /// Delete an entire variant group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of a product that belongs to the group to remove.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Envelope</returns>
        Envelope DeleteVariantGroupByProductId(string productId, int? productIdType = default(int?), int operationIndex = 0);

        /// <summary>
        /// Delete an entire variant group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of a product that belongs to the group to remove.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Envelope</returns>
        ApiResponse<Envelope> DeleteVariantGroupByProductIdWithHttpInfo(string productId, int? productIdType = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get a specific variant group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to get</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeVariantModelsReadVariantGroup</returns>
        EnvelopeVariantModelsReadVariantGroup GetVariantGroup(int groupId, string include = default(string), int operationIndex = 0);

        /// <summary>
        /// Get a specific variant group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to get</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeVariantModelsReadVariantGroup</returns>
        ApiResponse<EnvelopeVariantModelsReadVariantGroup> GetVariantGroupWithHttpInfo(int groupId, string include = default(string), int operationIndex = 0);
        /// <summary>
        /// Get the variant group for the provided id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product, for which to get the group.</param>
        /// <param name="productIdType">The type of id. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeVariantModelsReadVariantGroup</returns>
        EnvelopeVariantModelsReadVariantGroup GetVariantGroupByProductId(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0);

        /// <summary>
        /// Get the variant group for the provided id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product, for which to get the group.</param>
        /// <param name="productIdType">The type of id. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeVariantModelsReadVariantGroup</returns>
        ApiResponse<EnvelopeVariantModelsReadVariantGroup> GetVariantGroupByProductIdWithHttpInfo(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0);
        /// <summary>
        /// Get all valid variant labels
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeString</returns>
        EnvelopeString GetVariantLabels(int operationIndex = 0);

        /// <summary>
        /// Get all valid variant labels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeString</returns>
        ApiResponse<EnvelopeString> GetVariantLabelsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Remove a product from its variant group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to remove from group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeVariantModelsReadVariantGroup</returns>
        EnvelopeVariantModelsReadVariantGroup RemoveProductFromVariantGroup(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0);

        /// <summary>
        /// Remove a product from its variant group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to remove from group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeVariantModelsReadVariantGroup</returns>
        ApiResponse<EnvelopeVariantModelsReadVariantGroup> RemoveProductFromVariantGroupWithHttpInfo(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0);
        /// <summary>
        /// Adds the variant details for the product with the provided ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The ID of the product for which to update the variant details.</param>
        /// <param name="variant">The variant details.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeVariantModelsReadVariant</returns>
        EnvelopeVariantModelsReadVariant UpdateVariant(string productId, List<VariantModelsWriteVariant> variant, int? productIdType = default(int?), int operationIndex = 0);

        /// <summary>
        /// Adds the variant details for the product with the provided ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The ID of the product for which to update the variant details.</param>
        /// <param name="variant">The variant details.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeVariantModelsReadVariant</returns>
        ApiResponse<EnvelopeVariantModelsReadVariant> UpdateVariantWithHttpInfo(string productId, List<VariantModelsWriteVariant> variant, int? productIdType = default(int?), int operationIndex = 0);
        /// <summary>
        /// Updates the settings of a group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to update</param>
        /// <param name="variantGroup">The new settings for the group</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeVariantModelsReadVariantGroup</returns>
        EnvelopeVariantModelsReadVariantGroup UpdateVariantGroup(int groupId, VariantModelsWriteVariantGroup variantGroup, string include = default(string), int operationIndex = 0);

        /// <summary>
        /// Updates the settings of a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to update</param>
        /// <param name="variantGroup">The new settings for the group</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeVariantModelsReadVariantGroup</returns>
        ApiResponse<EnvelopeVariantModelsReadVariantGroup> UpdateVariantGroupWithHttpInfo(int groupId, VariantModelsWriteVariantGroup variantGroup, string include = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVariantApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Adds a product to an existing group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to which a product should be added</param>
        /// <param name="productId">The ID of the product to be added to the target group.</param>
        /// <param name="variant">The variant details.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeVariantModelsReadVariantGroup</returns>
        System.Threading.Tasks.Task<EnvelopeVariantModelsReadVariantGroup> AddProductToVariantGroupAsync(int groupId, string productId, List<VariantModelsWriteVariant> variant, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds a product to an existing group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to which a product should be added</param>
        /// <param name="productId">The ID of the product to be added to the target group.</param>
        /// <param name="variant">The variant details.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeVariantModelsReadVariantGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeVariantModelsReadVariantGroup>> AddProductToVariantGroupWithHttpInfoAsync(int groupId, string productId, List<VariantModelsWriteVariant> variant, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adds a product to an existing group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId1">The ID of a product belonging to the target group.</param>
        /// <param name="productId2">The ID of the product to be added to the target group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeVariantModelsReadVariantGroup</returns>
        System.Threading.Tasks.Task<EnvelopeVariantModelsReadVariantGroup> AddProductToVariantGroupByProductIdAsync(string productId1, string productId2, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds a product to an existing group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId1">The ID of a product belonging to the target group.</param>
        /// <param name="productId2">The ID of the product to be added to the target group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeVariantModelsReadVariantGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeVariantModelsReadVariantGroup>> AddProductToVariantGroupByProductIdWithHttpInfoAsync(string productId1, string productId2, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new variant group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variantGroup">The settings for the new group.</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeVariantModelsReadVariantGroup</returns>
        System.Threading.Tasks.Task<EnvelopeVariantModelsReadVariantGroup> CreateVariantGroupAsync(VariantModelsWriteVariantGroup variantGroup, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new variant group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variantGroup">The settings for the new group.</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeVariantModelsReadVariantGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeVariantModelsReadVariantGroup>> CreateVariantGroupWithHttpInfoAsync(VariantModelsWriteVariantGroup variantGroup, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new group for the provided product id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product, for which to create a group.</param>
        /// <param name="variantGroup">The settings for the new group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeVariantModelsReadVariantGroup</returns>
        System.Threading.Tasks.Task<EnvelopeVariantModelsReadVariantGroup> CreateVariantGroupWithProductAsync(string productId, VariantModelsWriteVariantGroup variantGroup, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new group for the provided product id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product, for which to create a group.</param>
        /// <param name="variantGroup">The settings for the new group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeVariantModelsReadVariantGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeVariantModelsReadVariantGroup>> CreateVariantGroupWithProductWithHttpInfoAsync(string productId, VariantModelsWriteVariantGroup variantGroup, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an entire variant group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeVariantModelsReadVariantGroup</returns>
        System.Threading.Tasks.Task<EnvelopeVariantModelsReadVariantGroup> DeleteVariantGroupAsync(int groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an entire variant group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeVariantModelsReadVariantGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeVariantModelsReadVariantGroup>> DeleteVariantGroupWithHttpInfoAsync(int groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an entire variant group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of a product that belongs to the group to remove.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Envelope</returns>
        System.Threading.Tasks.Task<Envelope> DeleteVariantGroupByProductIdAsync(string productId, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an entire variant group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of a product that belongs to the group to remove.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Envelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<Envelope>> DeleteVariantGroupByProductIdWithHttpInfoAsync(string productId, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a specific variant group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to get</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeVariantModelsReadVariantGroup</returns>
        System.Threading.Tasks.Task<EnvelopeVariantModelsReadVariantGroup> GetVariantGroupAsync(int groupId, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a specific variant group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to get</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeVariantModelsReadVariantGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeVariantModelsReadVariantGroup>> GetVariantGroupWithHttpInfoAsync(int groupId, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the variant group for the provided id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product, for which to get the group.</param>
        /// <param name="productIdType">The type of id. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeVariantModelsReadVariantGroup</returns>
        System.Threading.Tasks.Task<EnvelopeVariantModelsReadVariantGroup> GetVariantGroupByProductIdAsync(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the variant group for the provided id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product, for which to get the group.</param>
        /// <param name="productIdType">The type of id. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeVariantModelsReadVariantGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeVariantModelsReadVariantGroup>> GetVariantGroupByProductIdWithHttpInfoAsync(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all valid variant labels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeString</returns>
        System.Threading.Tasks.Task<EnvelopeString> GetVariantLabelsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all valid variant labels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeString)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeString>> GetVariantLabelsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a product from its variant group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to remove from group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeVariantModelsReadVariantGroup</returns>
        System.Threading.Tasks.Task<EnvelopeVariantModelsReadVariantGroup> RemoveProductFromVariantGroupAsync(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a product from its variant group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to remove from group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeVariantModelsReadVariantGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeVariantModelsReadVariantGroup>> RemoveProductFromVariantGroupWithHttpInfoAsync(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adds the variant details for the product with the provided ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The ID of the product for which to update the variant details.</param>
        /// <param name="variant">The variant details.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeVariantModelsReadVariant</returns>
        System.Threading.Tasks.Task<EnvelopeVariantModelsReadVariant> UpdateVariantAsync(string productId, List<VariantModelsWriteVariant> variant, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds the variant details for the product with the provided ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The ID of the product for which to update the variant details.</param>
        /// <param name="variant">The variant details.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeVariantModelsReadVariant)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeVariantModelsReadVariant>> UpdateVariantWithHttpInfoAsync(string productId, List<VariantModelsWriteVariant> variant, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the settings of a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to update</param>
        /// <param name="variantGroup">The new settings for the group</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeVariantModelsReadVariantGroup</returns>
        System.Threading.Tasks.Task<EnvelopeVariantModelsReadVariantGroup> UpdateVariantGroupAsync(int groupId, VariantModelsWriteVariantGroup variantGroup, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the settings of a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to update</param>
        /// <param name="variantGroup">The new settings for the group</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeVariantModelsReadVariantGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeVariantModelsReadVariantGroup>> UpdateVariantGroupWithHttpInfoAsync(int groupId, VariantModelsWriteVariantGroup variantGroup, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVariantApi : IVariantApiSync, IVariantApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VariantApi : IVariantApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VariantApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VariantApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VariantApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VariantApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VariantApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VariantApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VariantApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VariantApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Adds a product to an existing group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to which a product should be added</param>
        /// <param name="productId">The ID of the product to be added to the target group.</param>
        /// <param name="variant">The variant details.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeVariantModelsReadVariantGroup</returns>
        public EnvelopeVariantModelsReadVariantGroup AddProductToVariantGroup(int groupId, string productId, List<VariantModelsWriteVariant> variant, int? productIdType = default(int?), string include = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> localVarResponse = AddProductToVariantGroupWithHttpInfo(groupId, productId, variant, productIdType, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a product to an existing group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to which a product should be added</param>
        /// <param name="productId">The ID of the product to be added to the target group.</param>
        /// <param name="variant">The variant details.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeVariantModelsReadVariantGroup</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> AddProductToVariantGroupWithHttpInfo(int groupId, string productId, List<VariantModelsWriteVariant> variant, int? productIdType = default(int?), string include = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling VariantApi->AddProductToVariantGroup");
            }

            // verify the required parameter 'variant' is set
            if (variant == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'variant' when calling VariantApi->AddProductToVariantGroup");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            localVarRequestOptions.Data = variant;

            localVarRequestOptions.Operation = "VariantApi.AddProductToVariantGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EnvelopeVariantModelsReadVariantGroup>("/API/VariantGroup/{groupId}/{productId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddProductToVariantGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a product to an existing group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to which a product should be added</param>
        /// <param name="productId">The ID of the product to be added to the target group.</param>
        /// <param name="variant">The variant details.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeVariantModelsReadVariantGroup</returns>
        public async System.Threading.Tasks.Task<EnvelopeVariantModelsReadVariantGroup> AddProductToVariantGroupAsync(int groupId, string productId, List<VariantModelsWriteVariant> variant, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> localVarResponse = await AddProductToVariantGroupWithHttpInfoAsync(groupId, productId, variant, productIdType, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a product to an existing group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to which a product should be added</param>
        /// <param name="productId">The ID of the product to be added to the target group.</param>
        /// <param name="variant">The variant details.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeVariantModelsReadVariantGroup)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup>> AddProductToVariantGroupWithHttpInfoAsync(int groupId, string productId, List<VariantModelsWriteVariant> variant, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling VariantApi->AddProductToVariantGroup");
            }

            // verify the required parameter 'variant' is set
            if (variant == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'variant' when calling VariantApi->AddProductToVariantGroup");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            localVarRequestOptions.Data = variant;

            localVarRequestOptions.Operation = "VariantApi.AddProductToVariantGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EnvelopeVariantModelsReadVariantGroup>("/API/VariantGroup/{groupId}/{productId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddProductToVariantGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a product to an existing group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId1">The ID of a product belonging to the target group.</param>
        /// <param name="productId2">The ID of the product to be added to the target group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeVariantModelsReadVariantGroup</returns>
        public EnvelopeVariantModelsReadVariantGroup AddProductToVariantGroupByProductId(string productId1, string productId2, int? productIdType = default(int?), string include = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> localVarResponse = AddProductToVariantGroupByProductIdWithHttpInfo(productId1, productId2, productIdType, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a product to an existing group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId1">The ID of a product belonging to the target group.</param>
        /// <param name="productId2">The ID of the product to be added to the target group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeVariantModelsReadVariantGroup</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> AddProductToVariantGroupByProductIdWithHttpInfo(string productId1, string productId2, int? productIdType = default(int?), string include = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'productId1' is set
            if (productId1 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId1' when calling VariantApi->AddProductToVariantGroupByProductId");
            }

            // verify the required parameter 'productId2' is set
            if (productId2 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId2' when calling VariantApi->AddProductToVariantGroupByProductId");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId1", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId1)); // path parameter
            localVarRequestOptions.PathParameters.Add("productId2", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId2)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "VariantApi.AddProductToVariantGroupByProductId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EnvelopeVariantModelsReadVariantGroup>("/API/Variant/{productId1}/{productId2}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddProductToVariantGroupByProductId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a product to an existing group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId1">The ID of a product belonging to the target group.</param>
        /// <param name="productId2">The ID of the product to be added to the target group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeVariantModelsReadVariantGroup</returns>
        public async System.Threading.Tasks.Task<EnvelopeVariantModelsReadVariantGroup> AddProductToVariantGroupByProductIdAsync(string productId1, string productId2, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> localVarResponse = await AddProductToVariantGroupByProductIdWithHttpInfoAsync(productId1, productId2, productIdType, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a product to an existing group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId1">The ID of a product belonging to the target group.</param>
        /// <param name="productId2">The ID of the product to be added to the target group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeVariantModelsReadVariantGroup)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup>> AddProductToVariantGroupByProductIdWithHttpInfoAsync(string productId1, string productId2, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId1' is set
            if (productId1 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId1' when calling VariantApi->AddProductToVariantGroupByProductId");
            }

            // verify the required parameter 'productId2' is set
            if (productId2 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId2' when calling VariantApi->AddProductToVariantGroupByProductId");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId1", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId1)); // path parameter
            localVarRequestOptions.PathParameters.Add("productId2", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId2)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "VariantApi.AddProductToVariantGroupByProductId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EnvelopeVariantModelsReadVariantGroup>("/API/Variant/{productId1}/{productId2}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddProductToVariantGroupByProductId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new variant group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variantGroup">The settings for the new group.</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeVariantModelsReadVariantGroup</returns>
        public EnvelopeVariantModelsReadVariantGroup CreateVariantGroup(VariantModelsWriteVariantGroup variantGroup, string include = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> localVarResponse = CreateVariantGroupWithHttpInfo(variantGroup, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new variant group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variantGroup">The settings for the new group.</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeVariantModelsReadVariantGroup</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> CreateVariantGroupWithHttpInfo(VariantModelsWriteVariantGroup variantGroup, string include = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'variantGroup' is set
            if (variantGroup == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'variantGroup' when calling VariantApi->CreateVariantGroup");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            localVarRequestOptions.Data = variantGroup;

            localVarRequestOptions.Operation = "VariantApi.CreateVariantGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EnvelopeVariantModelsReadVariantGroup>("/API/VariantGroup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVariantGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new variant group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variantGroup">The settings for the new group.</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeVariantModelsReadVariantGroup</returns>
        public async System.Threading.Tasks.Task<EnvelopeVariantModelsReadVariantGroup> CreateVariantGroupAsync(VariantModelsWriteVariantGroup variantGroup, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> localVarResponse = await CreateVariantGroupWithHttpInfoAsync(variantGroup, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new variant group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variantGroup">The settings for the new group.</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeVariantModelsReadVariantGroup)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup>> CreateVariantGroupWithHttpInfoAsync(VariantModelsWriteVariantGroup variantGroup, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'variantGroup' is set
            if (variantGroup == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'variantGroup' when calling VariantApi->CreateVariantGroup");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            localVarRequestOptions.Data = variantGroup;

            localVarRequestOptions.Operation = "VariantApi.CreateVariantGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EnvelopeVariantModelsReadVariantGroup>("/API/VariantGroup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVariantGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new group for the provided product id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product, for which to create a group.</param>
        /// <param name="variantGroup">The settings for the new group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeVariantModelsReadVariantGroup</returns>
        public EnvelopeVariantModelsReadVariantGroup CreateVariantGroupWithProduct(string productId, VariantModelsWriteVariantGroup variantGroup, int? productIdType = default(int?), string include = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> localVarResponse = CreateVariantGroupWithProductWithHttpInfo(productId, variantGroup, productIdType, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new group for the provided product id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product, for which to create a group.</param>
        /// <param name="variantGroup">The settings for the new group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeVariantModelsReadVariantGroup</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> CreateVariantGroupWithProductWithHttpInfo(string productId, VariantModelsWriteVariantGroup variantGroup, int? productIdType = default(int?), string include = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling VariantApi->CreateVariantGroupWithProduct");
            }

            // verify the required parameter 'variantGroup' is set
            if (variantGroup == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'variantGroup' when calling VariantApi->CreateVariantGroupWithProduct");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            localVarRequestOptions.Data = variantGroup;

            localVarRequestOptions.Operation = "VariantApi.CreateVariantGroupWithProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EnvelopeVariantModelsReadVariantGroup>("/API/Variant/{productId}/VariantGroup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVariantGroupWithProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new group for the provided product id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product, for which to create a group.</param>
        /// <param name="variantGroup">The settings for the new group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeVariantModelsReadVariantGroup</returns>
        public async System.Threading.Tasks.Task<EnvelopeVariantModelsReadVariantGroup> CreateVariantGroupWithProductAsync(string productId, VariantModelsWriteVariantGroup variantGroup, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> localVarResponse = await CreateVariantGroupWithProductWithHttpInfoAsync(productId, variantGroup, productIdType, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new group for the provided product id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product, for which to create a group.</param>
        /// <param name="variantGroup">The settings for the new group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeVariantModelsReadVariantGroup)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup>> CreateVariantGroupWithProductWithHttpInfoAsync(string productId, VariantModelsWriteVariantGroup variantGroup, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling VariantApi->CreateVariantGroupWithProduct");
            }

            // verify the required parameter 'variantGroup' is set
            if (variantGroup == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'variantGroup' when calling VariantApi->CreateVariantGroupWithProduct");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            localVarRequestOptions.Data = variantGroup;

            localVarRequestOptions.Operation = "VariantApi.CreateVariantGroupWithProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EnvelopeVariantModelsReadVariantGroup>("/API/Variant/{productId}/VariantGroup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVariantGroupWithProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an entire variant group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeVariantModelsReadVariantGroup</returns>
        public EnvelopeVariantModelsReadVariantGroup DeleteVariantGroup(int groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> localVarResponse = DeleteVariantGroupWithHttpInfo(groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an entire variant group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeVariantModelsReadVariantGroup</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> DeleteVariantGroupWithHttpInfo(int groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "VariantApi.DeleteVariantGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<EnvelopeVariantModelsReadVariantGroup>("/API/VariantGroup/{groupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVariantGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an entire variant group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeVariantModelsReadVariantGroup</returns>
        public async System.Threading.Tasks.Task<EnvelopeVariantModelsReadVariantGroup> DeleteVariantGroupAsync(int groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> localVarResponse = await DeleteVariantGroupWithHttpInfoAsync(groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an entire variant group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeVariantModelsReadVariantGroup)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup>> DeleteVariantGroupWithHttpInfoAsync(int groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "VariantApi.DeleteVariantGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<EnvelopeVariantModelsReadVariantGroup>("/API/VariantGroup/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVariantGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an entire variant group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of a product that belongs to the group to remove.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Envelope</returns>
        public Envelope DeleteVariantGroupByProductId(string productId, int? productIdType = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Envelope> localVarResponse = DeleteVariantGroupByProductIdWithHttpInfo(productId, productIdType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an entire variant group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of a product that belongs to the group to remove.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Envelope</returns>
        public Org.OpenAPITools.Client.ApiResponse<Envelope> DeleteVariantGroupByProductIdWithHttpInfo(string productId, int? productIdType = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling VariantApi->DeleteVariantGroupByProductId");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }

            localVarRequestOptions.Operation = "VariantApi.DeleteVariantGroupByProductId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Envelope>("/API/Variant/{productId}/VariantGroup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVariantGroupByProductId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an entire variant group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of a product that belongs to the group to remove.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Envelope</returns>
        public async System.Threading.Tasks.Task<Envelope> DeleteVariantGroupByProductIdAsync(string productId, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Envelope> localVarResponse = await DeleteVariantGroupByProductIdWithHttpInfoAsync(productId, productIdType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an entire variant group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of a product that belongs to the group to remove.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Envelope)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Envelope>> DeleteVariantGroupByProductIdWithHttpInfoAsync(string productId, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling VariantApi->DeleteVariantGroupByProductId");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }

            localVarRequestOptions.Operation = "VariantApi.DeleteVariantGroupByProductId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Envelope>("/API/Variant/{productId}/VariantGroup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVariantGroupByProductId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific variant group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to get</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeVariantModelsReadVariantGroup</returns>
        public EnvelopeVariantModelsReadVariantGroup GetVariantGroup(int groupId, string include = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> localVarResponse = GetVariantGroupWithHttpInfo(groupId, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific variant group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to get</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeVariantModelsReadVariantGroup</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> GetVariantGroupWithHttpInfo(int groupId, string include = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "VariantApi.GetVariantGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EnvelopeVariantModelsReadVariantGroup>("/API/VariantGroup/{groupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVariantGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific variant group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to get</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeVariantModelsReadVariantGroup</returns>
        public async System.Threading.Tasks.Task<EnvelopeVariantModelsReadVariantGroup> GetVariantGroupAsync(int groupId, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> localVarResponse = await GetVariantGroupWithHttpInfoAsync(groupId, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific variant group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to get</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeVariantModelsReadVariantGroup)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup>> GetVariantGroupWithHttpInfoAsync(int groupId, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "VariantApi.GetVariantGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EnvelopeVariantModelsReadVariantGroup>("/API/VariantGroup/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVariantGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the variant group for the provided id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product, for which to get the group.</param>
        /// <param name="productIdType">The type of id. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeVariantModelsReadVariantGroup</returns>
        public EnvelopeVariantModelsReadVariantGroup GetVariantGroupByProductId(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> localVarResponse = GetVariantGroupByProductIdWithHttpInfo(productId, productIdType, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the variant group for the provided id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product, for which to get the group.</param>
        /// <param name="productIdType">The type of id. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeVariantModelsReadVariantGroup</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> GetVariantGroupByProductIdWithHttpInfo(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling VariantApi->GetVariantGroupByProductId");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "VariantApi.GetVariantGroupByProductId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EnvelopeVariantModelsReadVariantGroup>("/API/Variant/{productId}/VariantGroup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVariantGroupByProductId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the variant group for the provided id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product, for which to get the group.</param>
        /// <param name="productIdType">The type of id. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeVariantModelsReadVariantGroup</returns>
        public async System.Threading.Tasks.Task<EnvelopeVariantModelsReadVariantGroup> GetVariantGroupByProductIdAsync(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> localVarResponse = await GetVariantGroupByProductIdWithHttpInfoAsync(productId, productIdType, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the variant group for the provided id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product, for which to get the group.</param>
        /// <param name="productIdType">The type of id. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeVariantModelsReadVariantGroup)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup>> GetVariantGroupByProductIdWithHttpInfoAsync(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling VariantApi->GetVariantGroupByProductId");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "VariantApi.GetVariantGroupByProductId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EnvelopeVariantModelsReadVariantGroup>("/API/Variant/{productId}/VariantGroup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVariantGroupByProductId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all valid variant labels 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeString</returns>
        public EnvelopeString GetVariantLabels(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeString> localVarResponse = GetVariantLabelsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all valid variant labels 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeString</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeString> GetVariantLabelsWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "VariantApi.GetVariantLabels";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EnvelopeString>("/API/Variant/Labels", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVariantLabels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all valid variant labels 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeString</returns>
        public async System.Threading.Tasks.Task<EnvelopeString> GetVariantLabelsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeString> localVarResponse = await GetVariantLabelsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all valid variant labels 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeString)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeString>> GetVariantLabelsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "VariantApi.GetVariantLabels";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EnvelopeString>("/API/Variant/Labels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVariantLabels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a product from its variant group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to remove from group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeVariantModelsReadVariantGroup</returns>
        public EnvelopeVariantModelsReadVariantGroup RemoveProductFromVariantGroup(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> localVarResponse = RemoveProductFromVariantGroupWithHttpInfo(productId, productIdType, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a product from its variant group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to remove from group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeVariantModelsReadVariantGroup</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> RemoveProductFromVariantGroupWithHttpInfo(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling VariantApi->RemoveProductFromVariantGroup");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "VariantApi.RemoveProductFromVariantGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<EnvelopeVariantModelsReadVariantGroup>("/API/Variant/{productId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveProductFromVariantGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a product from its variant group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to remove from group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeVariantModelsReadVariantGroup</returns>
        public async System.Threading.Tasks.Task<EnvelopeVariantModelsReadVariantGroup> RemoveProductFromVariantGroupAsync(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> localVarResponse = await RemoveProductFromVariantGroupWithHttpInfoAsync(productId, productIdType, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a product from its variant group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id of the product to remove from group.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeVariantModelsReadVariantGroup)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup>> RemoveProductFromVariantGroupWithHttpInfoAsync(string productId, int? productIdType = default(int?), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling VariantApi->RemoveProductFromVariantGroup");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "VariantApi.RemoveProductFromVariantGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<EnvelopeVariantModelsReadVariantGroup>("/API/Variant/{productId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveProductFromVariantGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds the variant details for the product with the provided ID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The ID of the product for which to update the variant details.</param>
        /// <param name="variant">The variant details.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeVariantModelsReadVariant</returns>
        public EnvelopeVariantModelsReadVariant UpdateVariant(string productId, List<VariantModelsWriteVariant> variant, int? productIdType = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariant> localVarResponse = UpdateVariantWithHttpInfo(productId, variant, productIdType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds the variant details for the product with the provided ID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The ID of the product for which to update the variant details.</param>
        /// <param name="variant">The variant details.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeVariantModelsReadVariant</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariant> UpdateVariantWithHttpInfo(string productId, List<VariantModelsWriteVariant> variant, int? productIdType = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling VariantApi->UpdateVariant");
            }

            // verify the required parameter 'variant' is set
            if (variant == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'variant' when calling VariantApi->UpdateVariant");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            localVarRequestOptions.Data = variant;

            localVarRequestOptions.Operation = "VariantApi.UpdateVariant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EnvelopeVariantModelsReadVariant>("/API/Variant/{productId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateVariant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds the variant details for the product with the provided ID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The ID of the product for which to update the variant details.</param>
        /// <param name="variant">The variant details.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeVariantModelsReadVariant</returns>
        public async System.Threading.Tasks.Task<EnvelopeVariantModelsReadVariant> UpdateVariantAsync(string productId, List<VariantModelsWriteVariant> variant, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariant> localVarResponse = await UpdateVariantWithHttpInfoAsync(productId, variant, productIdType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds the variant details for the product with the provided ID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The ID of the product for which to update the variant details.</param>
        /// <param name="variant">The variant details.</param>
        /// <param name="productIdType">The type of product id provided. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeVariantModelsReadVariant)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariant>> UpdateVariantWithHttpInfoAsync(string productId, List<VariantModelsWriteVariant> variant, int? productIdType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling VariantApi->UpdateVariant");
            }

            // verify the required parameter 'variant' is set
            if (variant == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'variant' when calling VariantApi->UpdateVariant");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (productIdType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "productIdType", productIdType));
            }
            localVarRequestOptions.Data = variant;

            localVarRequestOptions.Operation = "VariantApi.UpdateVariant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EnvelopeVariantModelsReadVariant>("/API/Variant/{productId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateVariant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the settings of a group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to update</param>
        /// <param name="variantGroup">The new settings for the group</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnvelopeVariantModelsReadVariantGroup</returns>
        public EnvelopeVariantModelsReadVariantGroup UpdateVariantGroup(int groupId, VariantModelsWriteVariantGroup variantGroup, string include = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> localVarResponse = UpdateVariantGroupWithHttpInfo(groupId, variantGroup, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the settings of a group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to update</param>
        /// <param name="variantGroup">The new settings for the group</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnvelopeVariantModelsReadVariantGroup</returns>
        public Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> UpdateVariantGroupWithHttpInfo(int groupId, VariantModelsWriteVariantGroup variantGroup, string include = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'variantGroup' is set
            if (variantGroup == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'variantGroup' when calling VariantApi->UpdateVariantGroup");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            localVarRequestOptions.Data = variantGroup;

            localVarRequestOptions.Operation = "VariantApi.UpdateVariantGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EnvelopeVariantModelsReadVariantGroup>("/API/VariantGroup/{groupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateVariantGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the settings of a group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to update</param>
        /// <param name="variantGroup">The new settings for the group</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvelopeVariantModelsReadVariantGroup</returns>
        public async System.Threading.Tasks.Task<EnvelopeVariantModelsReadVariantGroup> UpdateVariantGroupAsync(int groupId, VariantModelsWriteVariantGroup variantGroup, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup> localVarResponse = await UpdateVariantGroupWithHttpInfoAsync(groupId, variantGroup, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the settings of a group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group to update</param>
        /// <param name="variantGroup">The new settings for the group</param>
        /// <param name="include">Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvelopeVariantModelsReadVariantGroup)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EnvelopeVariantModelsReadVariantGroup>> UpdateVariantGroupWithHttpInfoAsync(int groupId, VariantModelsWriteVariantGroup variantGroup, string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'variantGroup' is set
            if (variantGroup == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'variantGroup' when calling VariantApi->UpdateVariantGroup");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            localVarRequestOptions.Data = variantGroup;

            localVarRequestOptions.Operation = "VariantApi.UpdateVariantGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-apikey", this.Configuration.GetApiKeyWithPrefix("x-apikey"));
            }
            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EnvelopeVariantModelsReadVariantGroup>("/API/VariantGroup/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateVariantGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
