/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Test.Model
{
    /// <summary>
    ///  Class for testing OrderModelsPaymentDetail
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class OrderModelsPaymentDetailTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for OrderModelsPaymentDetail
        //private OrderModelsPaymentDetail instance;

        public OrderModelsPaymentDetailTests()
        {
            // TODO uncomment below to create an instance of OrderModelsPaymentDetail
            //instance = new OrderModelsPaymentDetail();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of OrderModelsPaymentDetail
        /// </summary>
        [Fact]
        public void OrderModelsPaymentDetailInstanceTest()
        {
            // TODO uncomment below to test "IsType" OrderModelsPaymentDetail
            //Assert.IsType<OrderModelsPaymentDetail>(instance);
        }


        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Fact]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }
        /// <summary>
        /// Test the property 'PaymentId'
        /// </summary>
        [Fact]
        public void PaymentIdTest()
        {
            // TODO unit test for the property 'PaymentId'
        }
        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Fact]
        public void NameTest()
        {
            // TODO unit test for the property 'Name'
        }
        /// <summary>
        /// Test the property 'DisplayName'
        /// </summary>
        [Fact]
        public void DisplayNameTest()
        {
            // TODO unit test for the property 'DisplayName'
        }
        /// <summary>
        /// Test the property 'TransactionId'
        /// </summary>
        [Fact]
        public void TransactionIdTest()
        {
            // TODO unit test for the property 'TransactionId'
        }
        /// <summary>
        /// Test the property 'SecondaryTransactionId'
        /// </summary>
        [Fact]
        public void SecondaryTransactionIdTest()
        {
            // TODO unit test for the property 'SecondaryTransactionId'
        }
        /// <summary>
        /// Test the property 'ReservationNumber'
        /// </summary>
        [Fact]
        public void ReservationNumberTest()
        {
            // TODO unit test for the property 'ReservationNumber'
        }
        /// <summary>
        /// Test the property 'ReservationDate'
        /// </summary>
        [Fact]
        public void ReservationDateTest()
        {
            // TODO unit test for the property 'ReservationDate'
        }
        /// <summary>
        /// Test the property 'PaymentDate'
        /// </summary>
        [Fact]
        public void PaymentDateTest()
        {
            // TODO unit test for the property 'PaymentDate'
        }
        /// <summary>
        /// Test the property 'Total'
        /// </summary>
        [Fact]
        public void TotalTest()
        {
            // TODO unit test for the property 'Total'
        }
        /// <summary>
        /// Test the property 'Payed'
        /// </summary>
        [Fact]
        public void PayedTest()
        {
            // TODO unit test for the property 'Payed'
        }
        /// <summary>
        /// Test the property 'PaymentFee'
        /// </summary>
        [Fact]
        public void PaymentFeeTest()
        {
            // TODO unit test for the property 'PaymentFee'
        }
        /// <summary>
        /// Test the property 'ShippingFee'
        /// </summary>
        [Fact]
        public void ShippingFeeTest()
        {
            // TODO unit test for the property 'ShippingFee'
        }
        /// <summary>
        /// Test the property 'PaymentOption'
        /// </summary>
        [Fact]
        public void PaymentOptionTest()
        {
            // TODO unit test for the property 'PaymentOption'
        }

    }

}
