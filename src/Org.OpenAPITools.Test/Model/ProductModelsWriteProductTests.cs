/*
 * Geins Management API
 *
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Test.Model
{
    /// <summary>
    ///  Class for testing ProductModelsWriteProduct
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ProductModelsWriteProductTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for ProductModelsWriteProduct
        //private ProductModelsWriteProduct instance;

        public ProductModelsWriteProductTests()
        {
            // TODO uncomment below to create an instance of ProductModelsWriteProduct
            //instance = new ProductModelsWriteProduct();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ProductModelsWriteProduct
        /// </summary>
        [Fact]
        public void ProductModelsWriteProductInstanceTest()
        {
            // TODO uncomment below to test "IsType" ProductModelsWriteProduct
            //Assert.IsType<ProductModelsWriteProduct>(instance);
        }


        /// <summary>
        /// Test the property 'ArticleNumber'
        /// </summary>
        [Fact]
        public void ArticleNumberTest()
        {
            // TODO unit test for the property 'ArticleNumber'
        }
        /// <summary>
        /// Test the property 'Names'
        /// </summary>
        [Fact]
        public void NamesTest()
        {
            // TODO unit test for the property 'Names'
        }
        /// <summary>
        /// Test the property 'Active'
        /// </summary>
        [Fact]
        public void ActiveTest()
        {
            // TODO unit test for the property 'Active'
        }
        /// <summary>
        /// Test the property 'PurchasePrice'
        /// </summary>
        [Fact]
        public void PurchasePriceTest()
        {
            // TODO unit test for the property 'PurchasePrice'
        }
        /// <summary>
        /// Test the property 'PurchasePriceCurrency'
        /// </summary>
        [Fact]
        public void PurchasePriceCurrencyTest()
        {
            // TODO unit test for the property 'PurchasePriceCurrency'
        }
        /// <summary>
        /// Test the property 'ShortTexts'
        /// </summary>
        [Fact]
        public void ShortTextsTest()
        {
            // TODO unit test for the property 'ShortTexts'
        }
        /// <summary>
        /// Test the property 'LongTexts'
        /// </summary>
        [Fact]
        public void LongTextsTest()
        {
            // TODO unit test for the property 'LongTexts'
        }
        /// <summary>
        /// Test the property 'TechTexts'
        /// </summary>
        [Fact]
        public void TechTextsTest()
        {
            // TODO unit test for the property 'TechTexts'
        }
        /// <summary>
        /// Test the property 'BrandId'
        /// </summary>
        [Fact]
        public void BrandIdTest()
        {
            // TODO unit test for the property 'BrandId'
        }
        /// <summary>
        /// Test the property 'SupplierId'
        /// </summary>
        [Fact]
        public void SupplierIdTest()
        {
            // TODO unit test for the property 'SupplierId'
        }
        /// <summary>
        /// Test the property 'Items'
        /// </summary>
        [Fact]
        public void ItemsTest()
        {
            // TODO unit test for the property 'Items'
        }
        /// <summary>
        /// Test the property 'CategoryIds'
        /// </summary>
        [Fact]
        public void CategoryIdsTest()
        {
            // TODO unit test for the property 'CategoryIds'
        }
        /// <summary>
        /// Test the property 'ParameterValues'
        /// </summary>
        [Fact]
        public void ParameterValuesTest()
        {
            // TODO unit test for the property 'ParameterValues'
        }
        /// <summary>
        /// Test the property 'Variants'
        /// </summary>
        [Fact]
        public void VariantsTest()
        {
            // TODO unit test for the property 'Variants'
        }
        /// <summary>
        /// Test the property 'Markets'
        /// </summary>
        [Fact]
        public void MarketsTest()
        {
            // TODO unit test for the property 'Markets'
        }
        /// <summary>
        /// Test the property 'FreightClassId'
        /// </summary>
        [Fact]
        public void FreightClassIdTest()
        {
            // TODO unit test for the property 'FreightClassId'
        }
        /// <summary>
        /// Test the property 'IntrastatCode'
        /// </summary>
        [Fact]
        public void IntrastatCodeTest()
        {
            // TODO unit test for the property 'IntrastatCode'
        }
        /// <summary>
        /// Test the property 'CountryOfOrigin'
        /// </summary>
        [Fact]
        public void CountryOfOriginTest()
        {
            // TODO unit test for the property 'CountryOfOrigin'
        }
        /// <summary>
        /// Test the property 'VariantGroupId'
        /// </summary>
        [Fact]
        public void VariantGroupIdTest()
        {
            // TODO unit test for the property 'VariantGroupId'
        }
        /// <summary>
        /// Test the property 'Vat'
        /// </summary>
        [Fact]
        public void VatTest()
        {
            // TODO unit test for the property 'Vat'
        }
        /// <summary>
        /// Test the property 'VatType'
        /// </summary>
        [Fact]
        public void VatTypeTest()
        {
            // TODO unit test for the property 'VatType'
        }
        /// <summary>
        /// Test the property 'ExternalId'
        /// </summary>
        [Fact]
        public void ExternalIdTest()
        {
            // TODO unit test for the property 'ExternalId'
        }
        /// <summary>
        /// Test the property 'ActivationDate'
        /// </summary>
        [Fact]
        public void ActivationDateTest()
        {
            // TODO unit test for the property 'ActivationDate'
        }

    }

}
